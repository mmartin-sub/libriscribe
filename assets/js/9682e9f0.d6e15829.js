"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[780],{686:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"development/BEST_PRACTICES","title":"Best Practices","description":"This document outlines best practices for development in the LibriScribe2 project.","source":"@site/docs/development/BEST_PRACTICES.md","sourceDirName":"development","slug":"/development/BEST_PRACTICES","permalink":"/libriscribe2/docs/development/BEST_PRACTICES","draft":false,"unlisted":false,"editUrl":"https://github.com/guerra2fernando/libriscribe2/tree/main/docs/docs/development/BEST_PRACTICES.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"LibriScribe Validation Interfaces API Documentation","permalink":"/libriscribe2/docs/api/validation-interfaces-api"},"next":{"title":"Development Scripts","permalink":"/libriscribe2/docs/development/SCRIPTS"}}');var t=n(4848),o=n(8453);const r={},c="Best Practices",l={},a=[{value:"Git Commit Messages",id:"git-commit-messages",level:2},{value:"Type",id:"type",level:3},{value:"Scope",id:"scope",level:3},{value:"Description",id:"description",level:3},{value:"Body",id:"body",level:3},{value:"Footer",id:"footer",level:3},{value:"GitHub Workflows",id:"github-workflows",level:2},{value:"Pip Publishing",id:"pip-publishing",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"best-practices",children:"Best Practices"})}),"\n",(0,t.jsx)(s.p,{children:"This document outlines best practices for development in the LibriScribe2 project."}),"\n",(0,t.jsx)(s.h2,{id:"git-commit-messages",children:"Git Commit Messages"}),"\n",(0,t.jsxs)(s.p,{children:["We follow the ",(0,t.jsx)(s.a,{href:"https://www.conventionalcommits.org/en/v1.0.0/",children:"Conventional Commits"})," specification for our commit messages. This provides a clear and consistent commit history, and allows us to automate a lot of our release process."]}),"\n",(0,t.jsxs)(s.p,{children:["Each commit message consists of a ",(0,t.jsx)(s.strong,{children:"header"}),", a ",(0,t.jsx)(s.strong,{children:"body"})," and a ",(0,t.jsx)(s.strong,{children:"footer"}),"."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"type",children:"Type"}),"\n",(0,t.jsx)(s.p,{children:"The type must be one of the following:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"feat"}),": A new feature"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"fix"}),": A bug fix"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"docs"}),": Documentation only changes"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"style"}),": Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"refactor"}),": A code change that neither fixes a bug nor adds a feature"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"perf"}),": A code change that improves performance"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"test"}),": Adding missing tests or correcting existing tests"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"build"}),": Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"ci"}),": Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"chore"}),": Other changes that don't modify src or test files"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"revert"}),": Reverts a previous commit"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"scope",children:"Scope"}),"\n",(0,t.jsx)(s.p,{children:"The scope is an optional part of the commit message that provides additional contextual information."}),"\n",(0,t.jsx)(s.h3,{id:"description",children:"Description"}),"\n",(0,t.jsx)(s.p,{children:"The description contains a succinct description of the change."}),"\n",(0,t.jsx)(s.h3,{id:"body",children:"Body"}),"\n",(0,t.jsx)(s.p,{children:"The body is an optional part of the commit message that provides additional contextual information about the code changes."}),"\n",(0,t.jsx)(s.h3,{id:"footer",children:"Footer"}),"\n",(0,t.jsx)(s.p,{children:"The footer is an optional part of the commit message that is used to reference tracking-tool IDs (such as Jira or GitHub issues)."}),"\n",(0,t.jsx)(s.h2,{id:"github-workflows",children:"GitHub Workflows"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Branching Strategy:"})," We use a ",(0,t.jsx)(s.code,{children:"main"})," branch for production-ready code, and feature branches for development. All feature branches should be created from the ",(0,t.jsx)(s.code,{children:"main"})," branch."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Pull Requests:"})," All changes to the ",(0,t.jsx)(s.code,{children:"main"})," branch must be made through a pull request. All pull requests must be reviewed and approved by at least one other developer before being merged."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Code Reviews:"})," All code reviews should be constructive and focus on improving the quality of the code."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Branch Protection:"})," The ",(0,t.jsx)(s.code,{children:"main"})," branch should be protected to prevent direct pushes and to require status checks to pass before merging."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"pip-publishing",children:"Pip Publishing"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Versioning:"})," We use ",(0,t.jsx)(s.a,{href:"https://semver.org/",children:"Semantic Versioning"})," for our releases."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"PyPI Publishing:"})," We use GitHub Actions to automatically publish the library to PyPI on every new release. The release process is triggered by creating a new release on GitHub."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Changelog:"})," The changelog is automatically generated from the commit messages using the Conventional Commits specification."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>c});var i=n(6540);const t={},o=i.createContext(t);function r(e){const s=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:s},e.children)}}}]);