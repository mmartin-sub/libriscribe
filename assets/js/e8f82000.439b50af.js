"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[220],{2457:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"validation_engine_api","title":"ValidationEngine API Documentation","description":"Overview","source":"@site/docs/validation_engine_api.md","sourceDirName":".","slug":"/validation_engine_api","permalink":"/libriscribe2/docs/validation_engine_api","draft":false,"unlisted":false,"editUrl":"https://github.com/guerra2fernando/libriscribe2/tree/main/docs/docs/validation_engine_api.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Configuration","permalink":"/libriscribe2/docs/user-guide/configuration"},"next":{"title":"LibriScribe Validation Interfaces - Function and Class Signatures","permalink":"/libriscribe2/docs/validation_interfaces_signatures"}}');var t=e(4848),l=e(8453);const s={},r="ValidationEngine API Documentation",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Class Definition",id:"class-definition",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Core Methods",id:"core-methods",level:2},{value:"Initialize",id:"initialize",level:3},{value:"Register Validator",id:"register-validator",level:3},{value:"Register Validator Class",id:"register-validator-class",level:3},{value:"Validate Project",id:"validate-project",level:3},{value:"Validate Chapter",id:"validate-chapter",level:3},{value:"Get Validation Status",id:"get-validation-status",level:3},{value:"Get Registered Validators",id:"get-registered-validators",level:3},{value:"Load Configuration from File",id:"load-configuration-from-file",level:3},{value:"Save Configuration to File",id:"save-configuration-to-file",level:3},{value:"Private Methods",id:"private-methods",level:2},{value:"_validate_config",id:"_validate_config",level:3},{value:"_initialize_components",id:"_initialize_components",level:3},{value:"_discover_validators",id:"_discover_validators",level:3},{value:"_get_enabled_validators",id:"_get_enabled_validators",level:3},{value:"_run_validators_parallel",id:"_run_validators_parallel",level:3},{value:"_run_validators_sequential",id:"_run_validators_sequential",level:3},{value:"_run_single_validator",id:"_run_single_validator",level:3},{value:"_aggregate_results",id:"_aggregate_results",level:3},{value:"_calculate_quality_score",id:"_calculate_quality_score",level:3},{value:"_count_findings_by_severity",id:"_count_findings_by_severity",level:3},{value:"_count_findings_by_type",id:"_count_findings_by_type",level:3},{value:"_determine_final_status",id:"_determine_final_status",level:3},{value:"Complete Usage Example",id:"complete-usage-example",level:2},{value:"Integration with ValidationConfig",id:"integration-with-validationconfig",level:2},{value:"Auto-Discovery of Validators",id:"auto-discovery-of-validators",level:2},{value:"Error Handling",id:"error-handling",level:2}];function c(n){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"validationengine-api-documentation",children:"ValidationEngine API Documentation"})}),"\n",(0,t.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"ValidationEngineImpl"})," class is the core implementation of the ",(0,t.jsx)(i.code,{children:"ValidationEngine"})," interface in the LibriScribe validation system. It orchestrates validation processes, manages validator lifecycle, and provides comprehensive validation capabilities for both book content and system code."]}),"\n",(0,t.jsx)(i.h2,{id:"class-definition",children:"Class Definition"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'class ValidationEngineImpl(ValidationEngine):\n    """Implementation of the core validation engine"""\n'})}),"\n",(0,t.jsx)(i.h2,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"def __init__(self):\n    self.config: Optional[ValidationConfig] = None\n    self.validators: Dict[str, ValidatorBase] = {}\n    self.active_validations: Dict[str, ValidationResult] = {}\n    self._initialized = False\n    self.config_manager = ValidationConfigManager()\n"})}),"\n",(0,t.jsx)(i.p,{children:"The constructor initializes the validation engine with empty state. No validation configuration is loaded at this point."}),"\n",(0,t.jsx)(i.h2,{id:"core-methods",children:"Core Methods"}),"\n",(0,t.jsx)(i.h3,{id:"initialize",children:"Initialize"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def initialize(self, config: ValidationConfig) -> None:\n    """Initialize the validation engine with configuration"""\n'})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"config"}),": ValidationConfig - Configuration object for the validation engine"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Returns:"})," None"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Raises:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ValidationError"}),": If initialization fails"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Description:"}),"\nInitializes the validation engine with the provided configuration. This method must be called before using any other methods. It validates the configuration, initializes internal components, and optionally auto-discovers validators."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example:"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'from libriscribe2.validation import ValidationEngineImpl, ValidationConfig\n\n# Create configuration\nconfig = ValidationConfig(\n    project_id="my_book_project",\n    enabled_validators=["content_validator", "publishing_standards_validator"],\n    quality_thresholds={"overall": 80.0, "tone_consistency": 85.0}\n)\n\n# Initialize engine\nengine = ValidationEngineImpl()\nawait engine.initialize(config)\n'})}),"\n",(0,t.jsx)(i.h3,{id:"register-validator",children:"Register Validator"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def register_validator(self, validator: ValidatorBase) -> None:\n    """Register a validator with the engine"""\n'})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"validator"}),": ValidatorBase - Validator instance to register"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Returns:"})," None"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Raises:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ValidationError"}),": If registration fails or engine is not initialized"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Description:"}),"\nRegisters a validator with the engine and initializes it with its specific configuration. The validator must implement the ",(0,t.jsx)(i.code,{children:"ValidatorBase"})," interface."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example:"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"from libriscribe2.validation.validators import ContentValidator\n\n# Create and register validator\ncontent_validator = ContentValidator()\nawait engine.register_validator(content_validator)\n"})}),"\n",(0,t.jsx)(i.h3,{id:"register-validator-class",children:"Register Validator Class"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def register_validator_class(self, validator_class: Type[ValidatorBase], **kwargs) -> None:\n    """Register a validator class with the engine"""\n'})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"validator_class"}),": Type[ValidatorBase] - Validator class to instantiate and register"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"**kwargs"}),": Additional keyword arguments to pass to the validator constructor"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Returns:"})," None"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Raises:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ValidationError"}),": If registration fails or engine is not initialized"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Description:"}),"\nCreates an instance of the specified validator class with the provided arguments and registers it with the engine. This is a convenience method for registering validators without manually creating instances."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example:"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"from libriscribe2.validation.validators import PublishingStandardsValidator\n\n# Register validator class with arguments\nawait engine.register_validator_class(\n    PublishingStandardsValidator,\n    check_metadata=True,\n    check_formatting=True\n)\n"})}),"\n",(0,t.jsx)(i.h3,{id:"validate-project",children:"Validate Project"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def validate_project(self, project_data: Any, project_id: str) -> ValidationResult:\n    """Validate a complete project"""\n'})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"project_data"}),": Any - Project data to validate (typically a ProjectKnowledgeBase instance)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"project_id"}),": str - Unique identifier for the project"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ValidationResult"}),": Complete validation result with findings and metrics"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Raises:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ValidationError"}),": If validation fails or engine is not initialized"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Description:"}),"\nValidates a complete project using all enabled validators. The method runs validators either in parallel or sequentially based on configuration, aggregates results, and determines the final validation status."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example:"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'from libriscribe2.knowledge_base import ProjectKnowledgeBase\n\n# Load project data\nproject_data = ProjectKnowledgeBase.load_from_file("projects/my_book/project_data.json")\n\n# Validate project\nvalidation_result = await engine.validate_project(project_data, "my_book_project")\n\n# Check validation status\nif validation_result.status == ValidationStatus.COMPLETED:\n    print(f"Validation successful! Quality score: {validation_result.overall_quality_score}")\nelif validation_result.status == ValidationStatus.NEEDS_HUMAN_REVIEW:\n    print("Human review required. Check findings for details.")\nelse:\n    print(f"Validation failed: {validation_result.status}")\n'})}),"\n",(0,t.jsx)(i.h3,{id:"validate-chapter",children:"Validate Chapter"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def validate_chapter(self, chapter_data: Any, project_context: Dict[str, Any]) -> ValidationResult:\n    """Validate individual chapter"""\n'})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"chapter_data"}),": Any - Chapter data to validate"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"project_context"}),": Dict[str, Any] - Context information about the project"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ValidationResult"}),": Validation result for the chapter"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Raises:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ValidationError"}),": If validation fails or engine is not initialized"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Description:"}),"\nValidates an individual chapter using validators that support chapter validation. This method is useful for validating chapters as they are generated, before the complete manuscript is assembled."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example:"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'# Validate a single chapter\nchapter_data = {\n    "chapter_id": "chapter_1",\n    "title": "The Beginning",\n    "content": "Chapter content here...",\n    "word_count": 2500\n}\n\nproject_context = {\n    "project_id": "my_book_project",\n    "genre": "fantasy",\n    "tone": "adventurous"\n}\n\nchapter_result = await engine.validate_chapter(chapter_data, project_context)\nprint(f"Chapter validation status: {chapter_result.status}")\n'})}),"\n",(0,t.jsx)(i.h3,{id:"get-validation-status",children:"Get Validation Status"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def get_validation_status(self, validation_id: str) -> Optional[ValidationResult]:\n    """Get status of ongoing validation"""\n'})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"validation_id"}),": str - Unique identifier for the validation process"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"Optional[ValidationResult]"}),": Current validation result if found, None otherwise"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Description:"}),"\nRetrieves the current status of an ongoing validation process. This is useful for checking the progress of long-running validations."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example:"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'# Check status of ongoing validation\nvalidation_status = await engine.get_validation_status("validation_123")\nif validation_status:\n    print(f"Validation status: {validation_status.status}")\nelse:\n    print("Validation not found")\n'})}),"\n",(0,t.jsx)(i.h3,{id:"get-registered-validators",children:"Get Registered Validators"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def get_registered_validators(self) -> List[Dict[str, str]]:\n    """Get list of registered validators"""\n'})}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Parameters:"})," None"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"List[Dict[str, str]]"}),": List of validator information dictionaries"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Description:"}),"\nReturns information about all registered validators, including their IDs, names, versions, and supported content types."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example:"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:"# Get information about registered validators\nvalidators = await engine.get_registered_validators()\nfor validator in validators:\n    print(f\"Validator: {validator['name']} (ID: {validator['id']}, Version: {validator['version']})\")\n    print(f\"Supported content types: {', '.join(validator['supported_types'])}\")\n"})}),"\n",(0,t.jsx)(i.h3,{id:"load-configuration-from-file",children:"Load Configuration from File"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def load_config_from_file(self, config_path: str) -> ValidationConfig:\n    """Load configuration from a file"""\n'})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"config_path"}),": str - Path to the configuration file (YAML or JSON)"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ValidationConfig"}),": Loaded configuration object"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Raises:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ConfigurationError"}),": If the configuration file is not found or invalid"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Description:"}),"\nLoads validation configuration from a YAML or JSON file. The file format is determined by the file extension."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example:"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'# Load configuration from file\nconfig = await engine.load_config_from_file("configs/validation_config.yaml")\n\n# Initialize engine with loaded config\nawait engine.initialize(config)\n'})}),"\n",(0,t.jsx)(i.h3,{id:"save-configuration-to-file",children:"Save Configuration to File"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def save_config_to_file(self, config: ValidationConfig, config_path: str) -> None:\n    """Save configuration to a file"""\n'})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"config"}),": ValidationConfig - Configuration object to save"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"config_path"}),": str - Path where the configuration file should be saved"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Returns:"})," None"]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Raises:"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"ConfigurationError"}),": If saving the configuration fails"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Description:"}),"\nSaves a validation configuration to a YAML or JSON file. The file format is determined by the file extension."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:"Example:"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'# Create custom configuration\nconfig = ValidationConfig(\n    project_id="custom_project",\n    enabled_validators=["content_validator", "quality_validator"],\n    quality_thresholds={"overall": 85.0, "tone_consistency": 90.0},\n    human_review_threshold=75.0\n)\n\n# Save configuration to file\nawait engine.save_config_to_file(config, "configs/custom_validation_config.yaml")\n'})}),"\n",(0,t.jsx)(i.h2,{id:"private-methods",children:"Private Methods"}),"\n",(0,t.jsx)(i.h3,{id:"_validate_config",children:"_validate_config"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def _validate_config(self, config: ValidationConfig) -> None:\n    """Validate the configuration"""\n'})}),"\n",(0,t.jsx)(i.p,{children:"Validates that the provided configuration meets requirements."}),"\n",(0,t.jsx)(i.h3,{id:"_initialize_components",children:"_initialize_components"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def _initialize_components(self) -> None:\n    """Initialize internal components"""\n'})}),"\n",(0,t.jsx)(i.p,{children:"Initializes internal components required by the validation engine."}),"\n",(0,t.jsx)(i.h3,{id:"_discover_validators",children:"_discover_validators"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def _discover_validators(self) -> None:\n    """Auto-discover validators in the validators package"""\n'})}),"\n",(0,t.jsx)(i.p,{children:"Automatically discovers and registers validator classes from the validators package."}),"\n",(0,t.jsx)(i.h3,{id:"_get_enabled_validators",children:"_get_enabled_validators"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'def _get_enabled_validators(self) -> List[ValidatorBase]:\n    """Get list of enabled validators"""\n'})}),"\n",(0,t.jsx)(i.p,{children:"Returns a list of validators that are enabled in the current configuration."}),"\n",(0,t.jsx)(i.h3,{id:"_run_validators_parallel",children:"_run_validators_parallel"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def _run_validators_parallel(self, validators: List[ValidatorBase],\n                                 content: Any, context: Dict[str, Any]) -> Dict[str, ValidatorResult]:\n    """Run validators in parallel"""\n'})}),"\n",(0,t.jsx)(i.p,{children:"Runs multiple validators in parallel for improved performance."}),"\n",(0,t.jsx)(i.h3,{id:"_run_validators_sequential",children:"_run_validators_sequential"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def _run_validators_sequential(self, validators: List[ValidatorBase],\n                                   content: Any, context: Dict[str, Any]) -> Dict[str, ValidatorResult]:\n    """Run validators sequentially"""\n'})}),"\n",(0,t.jsx)(i.p,{children:"Runs validators sequentially, which allows for fail-fast behavior."}),"\n",(0,t.jsx)(i.h3,{id:"_run_single_validator",children:"_run_single_validator"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def _run_single_validator(self, validator: ValidatorBase,\n                              content: Any, context: Dict[str, Any]) -> ValidatorResult:\n    """Run a single validator"""\n'})}),"\n",(0,t.jsx)(i.p,{children:"Executes a single validator with error handling and timing."}),"\n",(0,t.jsx)(i.h3,{id:"_aggregate_results",children:"_aggregate_results"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'async def _aggregate_results(self, validation_result: ValidationResult) -> ValidationResult:\n    """Aggregate results from all validators"""\n'})}),"\n",(0,t.jsx)(i.p,{children:"Combines results from multiple validators into a single comprehensive result."}),"\n",(0,t.jsx)(i.h3,{id:"_calculate_quality_score",children:"_calculate_quality_score"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'def _calculate_quality_score(self, findings: List[Finding]) -> float:\n    """Calculate overall quality score based on findings"""\n'})}),"\n",(0,t.jsx)(i.p,{children:"Calculates an overall quality score based on validation findings."}),"\n",(0,t.jsx)(i.h3,{id:"_count_findings_by_severity",children:"_count_findings_by_severity"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'def _count_findings_by_severity(self, findings: List[Finding]) -> Dict[str, int]:\n    """Count findings by severity"""\n'})}),"\n",(0,t.jsx)(i.p,{children:"Counts validation findings by severity level."}),"\n",(0,t.jsx)(i.h3,{id:"_count_findings_by_type",children:"_count_findings_by_type"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'def _count_findings_by_type(self, findings: List[Finding]) -> Dict[str, int]:\n    """Count findings by type"""\n'})}),"\n",(0,t.jsx)(i.p,{children:"Counts validation findings by finding type."}),"\n",(0,t.jsx)(i.h3,{id:"_determine_final_status",children:"_determine_final_status"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'def _determine_final_status(self, validation_result: ValidationResult) -> ValidationStatus:\n    """Determine the final validation status"""\n'})}),"\n",(0,t.jsx)(i.p,{children:"Determines the final validation status based on validator results and findings."}),"\n",(0,t.jsx)(i.h2,{id:"complete-usage-example",children:"Complete Usage Example"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'import asyncio\nfrom libriscribe2.validation import ValidationEngineImpl, ValidationConfig\nfrom libriscribe2.validation.validators import ContentValidator, PublishingStandardsValidator\nfrom libriscribe2.knowledge_base import ProjectKnowledgeBase\n\nasync def validate_book_project():\n    # Create validation configuration\n    config = ValidationConfig(\n        project_id="fantasy_novel",\n        enabled_validators=["content_validator", "publishing_standards_validator"],\n        quality_thresholds={\n            "overall": 80.0,\n            "tone_consistency": 85.0,\n            "outline_adherence": 90.0\n        },\n        human_review_threshold=75.0,\n        parallel_processing=True,\n        fail_fast=True\n    )\n\n    # Initialize validation engine\n    engine = ValidationEngineImpl()\n    await engine.initialize(config)\n\n    # Register validators\n    content_validator = ContentValidator()\n    publishing_validator = PublishingStandardsValidator()\n\n    await engine.register_validator(content_validator)\n    await engine.register_validator(publishing_validator)\n\n    # Load project data\n    project_data = ProjectKnowledgeBase.load_from_file("projects/fantasy_novel/project_data.json")\n\n    # Validate project\n    validation_result = await engine.validate_project(project_data, "fantasy_novel")\n\n    # Process validation results\n    if validation_result.status == ValidationStatus.COMPLETED:\n        print(f"Validation successful! Quality score: {validation_result.overall_quality_score}")\n\n        # Print findings by validator\n        for validator_id, result in validation_result.validator_results.items():\n            print(f"\\n{validator_id} findings:")\n            for finding in result.findings:\n                print(f"- {finding.severity.value}: {finding.title}")\n                print(f"  {finding.message}")\n\n    elif validation_result.status == ValidationStatus.NEEDS_HUMAN_REVIEW:\n        print(f"Human review required. Quality score: {validation_result.overall_quality_score}")\n        print("Critical findings:")\n\n        # Print critical findings\n        for validator_id, result in validation_result.validator_results.items():\n            critical_findings = [f for f in result.findings if f.severity == Severity.CRITICAL]\n            for finding in critical_findings:\n                print(f"- {finding.title}: {finding.message}")\n\n    else:\n        print(f"Validation failed: {validation_result.status}")\n\n    # Save configuration for future use\n    await engine.save_config_to_file(config, "projects/fantasy_novel/validation_config.yaml")\n\n# Run validation\nasyncio.run(validate_book_project())\n'})}),"\n",(0,t.jsx)(i.h2,{id:"integration-with-validationconfig",children:"Integration with ValidationConfig"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"ValidationEngineImpl"})," works closely with the ",(0,t.jsx)(i.code,{children:"ValidationConfig"})," class to manage validation settings:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'from libriscribe2.validation import ValidationConfig\n\n# Create configuration with specific settings\nconfig = ValidationConfig(\n    project_id="my_project",\n    validation_rules={\n        "check_tone_consistency": True,\n        "check_outline_adherence": True\n    },\n    quality_thresholds={\n        "overall": 80.0,\n        "tone_consistency": 85.0,\n        "outline_adherence": 90.0\n    },\n    human_review_threshold=75.0,\n    enabled_validators=["content_validator", "publishing_standards_validator"],\n    validator_configs={\n        "content_validator": {\n            "check_tone_consistency": True,\n            "check_outline_adherence": True\n        },\n        "publishing_standards_validator": {\n            "check_metadata": True,\n            "check_formatting": True\n        }\n    },\n    ai_mock_enabled=False,\n    parallel_processing=True,\n    max_parallel_requests=100,\n    request_timeout=1200,\n    chunk_size_tokens=50000,\n    output_formats=["json", "html"],\n    fail_fast=True\n)\n'})}),"\n",(0,t.jsx)(i.h2,{id:"auto-discovery-of-validators",children:"Auto-Discovery of Validators"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"ValidationEngineImpl"})," can automatically discover and register validators from the validators package:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'# Enable auto-discovery in configuration\nconfig = ValidationConfig(\n    project_id="my_project",\n    # Auto-discovery is enabled by default\n)\n\n# Initialize engine with auto-discovery\nengine = ValidationEngineImpl()\nawait engine.initialize(config)\n\n# Check discovered validators\nvalidators = await engine.get_registered_validators()\nprint(f"Discovered {len(validators)} validators:")\nfor validator in validators:\n    print(f"- {validator[\'name\']} (ID: {validator[\'id\']})")\n'})}),"\n",(0,t.jsx)(i.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"ValidationEngineImpl"})," provides comprehensive error handling:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-python",children:'try:\n    # Initialize engine\n    engine = ValidationEngineImpl()\n    await engine.initialize(config)\n\n    # Validate project\n    result = await engine.validate_project(project_data, "my_project")\n\nexcept ValidationError as e:\n    print(f"Validation error: {e}")\n\nexcept ConfigurationError as e:\n    print(f"Configuration error: {e}")\n\nexcept Exception as e:\n    print(f"Unexpected error: {e}")\n'})})]})}function h(n={}){const{wrapper:i}={...(0,l.R)(),...n.components};return i?(0,t.jsx)(i,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},8453:(n,i,e)=>{e.d(i,{R:()=>s,x:()=>r});var a=e(6540);const t={},l=a.createContext(t);function s(n){const i=a.useContext(l);return a.useMemo(function(){return"function"==typeof n?n(i):{...i,...n}},[i,n])}function r(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),a.createElement(l.Provider,{value:i},n.children)}}}]);