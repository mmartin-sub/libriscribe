"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[151],{6803:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"api/validation-interfaces-api","title":"LibriScribe Validation Interfaces API Documentation","description":"Overview","source":"@site/docs/api/validation-interfaces-api.md","sourceDirName":"api","slug":"/api/validation-interfaces-api","permalink":"/libriscribe2/docs/api/validation-interfaces-api","draft":false,"unlisted":false,"editUrl":"https://github.com/guerra2fernando/libriscribe2/tree/main/docs/docs/api/validation-interfaces-api.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ProjectManagerAgent - Function Signatures","permalink":"/libriscribe2/docs/api/project-manager-signatures"},"next":{"title":"Best Practices","permalink":"/libriscribe2/docs/development/BEST_PRACTICES"}}');var r=i(4848),l=i(8453);const s={},a="LibriScribe Validation Interfaces API Documentation",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Core Classes and Interfaces",id:"core-classes-and-interfaces",level:2},{value:"Enums",id:"enums",level:3},{value:"ValidationStatus",id:"validationstatus",level:4},{value:"FindingType",id:"findingtype",level:4},{value:"Severity",id:"severity",level:4},{value:"Data Classes",id:"data-classes",level:3},{value:"ContentLocation",id:"contentlocation",level:4},{value:"Finding",id:"finding",level:4},{value:"ValidatorResult",id:"validatorresult",level:4},{value:"ValidationResult",id:"validationresult",level:4},{value:"ValidationConfig",id:"validationconfig",level:4},{value:"ValidatorBase Class",id:"validatorbase-class",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Abstract Methods",id:"abstract-methods",level:3},{value:"initialize",id:"initialize",level:4},{value:"validate",id:"validate",level:4},{value:"get_supported_content_types",id:"get_supported_content_types",level:4},{value:"Lifecycle Hooks",id:"lifecycle-hooks",level:3},{value:"pre_validation_hook",id:"pre_validation_hook",level:4},{value:"post_validation_hook",id:"post_validation_hook",level:4},{value:"on_validation_error",id:"on_validation_error",level:4},{value:"on_configuration_change",id:"on_configuration_change",level:4},{value:"Core Methods",id:"core-methods",level:3},{value:"validate_with_lifecycle",id:"validate_with_lifecycle",level:4},{value:"configure_validation_rules",id:"configure_validation_rules",level:4},{value:"configure_quality_thresholds",id:"configure_quality_thresholds",level:4},{value:"get_validation_rule",id:"get_validation_rule",level:4},{value:"get_quality_threshold",id:"get_quality_threshold",level:4},{value:"should_flag_for_human_review",id:"should_flag_for_human_review",level:4},{value:"create_finding",id:"create_finding",level:4},{value:"get_validator_info",id:"get_validator_info",level:4},{value:"get_execution_context",id:"get_execution_context",level:4},{value:"cleanup",id:"cleanup",level:4},{value:"Abstract Interfaces",id:"abstract-interfaces",level:2},{value:"ValidationEngine",id:"validationengine",level:3},{value:"ValidationInterface",id:"validationinterface",level:3},{value:"ResourceManager",id:"resourcemanager",level:3},{value:"HealthMonitor",id:"healthmonitor",level:3},{value:"AIUsageTracker",id:"aiusagetracker",level:3},{value:"ReportGenerator",id:"reportgenerator",level:3},{value:"Exception Classes",id:"exception-classes",level:2},{value:"ValidationError",id:"validationerror",level:3},{value:"ValidatorNotFoundError",id:"validatornotfounderror",level:3},{value:"ConfigurationError",id:"configurationerror",level:3},{value:"ResourceError",id:"resourceerror",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Creating a Custom Validator",id:"creating-a-custom-validator",level:3},{value:"Using Lifecycle Validation",id:"using-lifecycle-validation",level:3},{value:"Error Handling with Recovery",id:"error-handling-with-recovery",level:3},{value:"Configuration Management",id:"configuration-management",level:3},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"libriscribe-validation-interfaces-api-documentation",children:"LibriScribe Validation Interfaces API Documentation"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"src/libriscribe2/validation/interfaces.py"})," module defines the core interfaces and data structures for the LibriScribe validation system. This module establishes system boundaries and enables pluggable validation components with comprehensive lifecycle management."]}),"\n",(0,r.jsx)(n.h2,{id:"core-classes-and-interfaces",children:"Core Classes and Interfaces"}),"\n",(0,r.jsx)(n.h3,{id:"enums",children:"Enums"}),"\n",(0,r.jsx)(n.h4,{id:"validationstatus",children:"ValidationStatus"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class ValidationStatus(Enum):\n    NOT_STARTED = "not_started"\n    IN_PROGRESS = "in_progress"\n    COMPLETED = "completed"\n    FAILED = "failed"\n    NEEDS_HUMAN_REVIEW = "needs_human_review"\n    ERROR = "error"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Status enumeration for validation processes and individual validators."}),"\n",(0,r.jsx)(n.h4,{id:"findingtype",children:"FindingType"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class FindingType(Enum):\n    CONTENT_QUALITY = "content_quality"\n    TONE_CONSISTENCY = "tone_consistency"\n    OUTLINE_ADHERENCE = "outline_adherence"\n    SECURITY_VULNERABILITY = "security_vulnerability"\n    CODE_QUALITY = "code_quality"\n    DOCUMENTATION = "documentation"\n    COMPLIANCE = "compliance"\n    PUBLISHING_STANDARD = "publishing_standard"\n    AI_OUTPUT_QUALITY = "ai_output_quality"\n    SYSTEM_ERROR = "system_error"\n    LANGUAGE_UNICODE = "language_unicode"\n    CHARACTER_COMPATIBILITY = "character_compatibility"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Types of validation findings that can be reported by validators."}),"\n",(0,r.jsx)(n.h4,{id:"severity",children:"Severity"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class Severity(Enum):\n    INFO = "info"\n    LOW = "low"\n    MEDIUM = "medium"\n    HIGH = "high"\n    CRITICAL = "critical"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Severity levels for validation findings."}),"\n",(0,r.jsx)(n.h3,{id:"data-classes",children:"Data Classes"}),"\n",(0,r.jsx)(n.h4,{id:"contentlocation",children:"ContentLocation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@dataclass\nclass ContentLocation:\n    content_type: str  # "chapter", "scene", "manuscript", "code_file", etc.\n    content_id: str    # chapter_id, scene_id, file_path, etc.\n    line_number: Optional[int] = None\n    column_number: Optional[int] = None\n    character_range: Optional[Tuple[int, int]] = None\n'})}),"\n",(0,r.jsx)(n.p,{children:"Location information for validation findings within content."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content_type"}),": Type of content being referenced"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content_id"}),": Unique identifier for the content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"line_number"}),": Optional line number within the content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"column_number"}),": Optional column number within the line"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"character_range"}),": Optional character range as (start, end) tuple"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"finding",children:"Finding"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@dataclass\nclass Finding:\n    finding_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    validator_id: str = ""\n    type: FindingType = FindingType.CONTENT_QUALITY\n    severity: Severity = Severity.MEDIUM\n    title: str = ""\n    message: str = ""\n    location: Optional[ContentLocation] = None\n    remediation: Optional[str] = None\n    confidence: float = 1.0  # 0.0 to 1.0\n    metadata: Dict[str, Any] = field(default_factory=dict)\n    timestamp: datetime = field(default_factory=datetime.now)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Individual validation finding with detailed information and context."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"finding_id"}),": Unique identifier for the finding"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validator_id"}),": ID of the validator that generated this finding"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"}),": Type of finding from FindingType enum"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"severity"}),": Severity level from Severity enum"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"title"}),": Short descriptive title"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"message"}),": Detailed finding message"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"location"}),": Optional location information"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"remediation"}),": Optional suggested remediation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"confidence"}),": Confidence score (0.0-1.0)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metadata"}),": Additional metadata dictionary"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"timestamp"}),": When the finding was created"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"validatorresult",children:"ValidatorResult"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@dataclass\nclass ValidatorResult:\n    validator_id: str\n    status: ValidationStatus\n    findings: List[Finding] = field(default_factory=list)\n    metrics: Dict[str, Any] = field(default_factory=dict)\n    execution_time: float = 0.0\n    ai_usage: Dict[str, Any] = field(default_factory=dict)\n    metadata: Dict[str, Any] = field(default_factory=dict)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Result from a single validator execution."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validator_id"}),": ID of the validator that produced this result"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"status"}),": Validation status from ValidationStatus enum"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"findings"}),": List of findings discovered during validation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metrics"}),": Performance and quality metrics"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"execution_time"}),": Time taken to execute validation in seconds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ai_usage"}),": AI usage statistics (tokens, cost, etc.)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metadata"}),": Additional result metadata"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"validationresult",children:"ValidationResult"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@dataclass\nclass ValidationResult:\n    validation_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    project_id: str = ""\n    status: ValidationStatus = ValidationStatus.NOT_STARTED\n    overall_quality_score: float = 0.0\n    human_review_required: bool = False\n    validator_results: Dict[str, ValidatorResult] = field(default_factory=dict)\n    summary: Dict[str, Any] = field(default_factory=dict)\n    total_execution_time: float = 0.0\n    total_ai_usage: Dict[str, Any] = field(default_factory=dict)\n    timestamp: datetime = field(default_factory=datetime.now)\n    metadata: Dict[str, Any] = field(default_factory=dict)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Complete validation result containing all validator outputs and aggregated metrics."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validation_id"}),": Unique identifier for this validation run"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"project_id"}),": Project identifier"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"status"}),": Overall validation status"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"overall_quality_score"}),": Aggregated quality score (0-100)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"human_review_required"}),": Whether human review is needed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validator_results"}),": Results from each validator"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"summary"}),": Aggregated summary metrics"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"total_execution_time"}),": Total validation time in seconds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"total_ai_usage"}),": Aggregated AI usage metrics"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"timestamp"}),": Validation timestamp"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metadata"}),": Additional validation metadata"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"validationconfig",children:"ValidationConfig"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@dataclass\nclass ValidationConfig:\n    # Core settings\n    project_id: str = ""\n    validation_rules: Dict[str, Any] = field(default_factory=dict)\n    quality_thresholds: Dict[str, float] = field(default_factory=dict)\n    human_review_threshold: float = 70.0\n\n    # Validator settings\n    enabled_validators: List[str] = field(default_factory=list)\n    validator_configs: Dict[str, Dict[str, Any]] = field(default_factory=dict)\n\n    # AI settings\n    ai_mock_enabled: bool = False\n    ai_usage_tracking: bool = True\n    litellm_config: Dict[str, Any] = field(default_factory=dict)\n\n    # Processing settings\n    parallel_processing: bool = True\n    max_parallel_requests: int = 100\n    request_timeout: int = 1200  # 20 minutes\n    chunk_size_tokens: int = 50000\n\n    # Output settings\n    output_formats: List[str] = field(default_factory=lambda: ["json", "html"])\n    report_template: Optional[str] = None\n\n    # Workflow integration\n    auto_validate_chapters: bool = True\n    auto_validate_manuscript: bool = True\n    fail_fast: bool = True\n\n    # Resource management\n    temp_directory: Optional[str] = None\n    cleanup_on_completion: bool = True\n\n    # Monitoring\n    health_check_enabled: bool = True\n    metrics_collection: bool = True\n'})}),"\n",(0,r.jsx)(n.p,{children:"Configuration object for customizing validation behavior."}),"\n",(0,r.jsx)(n.h2,{id:"validatorbase-class",children:"ValidatorBase Class"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ValidatorBase"})," class is the foundation for all LibriScribe validators, providing comprehensive lifecycle management and common functionality."]}),"\n",(0,r.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def __init__(self, validator_id: str, name: str, version: str):\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validator_id"}),": Unique identifier for the validator"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"}),": Human-readable validator name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"version"}),": Validator version string"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Attributes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validator_id"}),": Unique validator identifier"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"}),": Validator display name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"version"}),": Version string"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config"}),": Optional configuration dictionary"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"is_initialized"}),": Whether validator has been initialized"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validation_rules"}),": Dictionary of validation rules"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"quality_thresholds"}),": Dictionary of quality thresholds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_execution_context"}),": Current execution context"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"abstract-methods",children:"Abstract Methods"}),"\n",(0,r.jsx)(n.p,{children:"These methods must be implemented by all validator subclasses:"}),"\n",(0,r.jsx)(n.h4,{id:"initialize",children:"initialize"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@abstractmethod\nasync def initialize(self, config: Dict[str, Any]) -> None:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Initialize validator with configuration."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config"}),": Configuration dictionary specific to this validator"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"validate",children:"validate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@abstractmethod\nasync def validate(self, content: Any, context: Dict[str, Any]) -> ValidatorResult:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Perform validation on content."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content"}),": Content to be validated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"context"}),": Validation context dictionary"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ValidatorResult"}),": Validation result with findings and metrics"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_supported_content_types",children:"get_supported_content_types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@abstractmethod\ndef get_supported_content_types(self) -> List[str]:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Return supported content types."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"List[str]"}),": List of supported content type strings"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"lifecycle-hooks",children:"Lifecycle Hooks"}),"\n",(0,r.jsx)(n.p,{children:"These methods can be overridden by subclasses to customize validation behavior:"}),"\n",(0,r.jsx)(n.h4,{id:"pre_validation_hook",children:"pre_validation_hook"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"async def pre_validation_hook(self, content: Any, context: Dict[str, Any]) -> Dict[str, Any]:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Hook called before validation starts."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content"}),": Content to be validated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"context"}),": Validation context"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Dict[str, Any]"}),": Modified context or additional metadata"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"post_validation_hook",children:"post_validation_hook"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"async def post_validation_hook(self, result: ValidatorResult, content: Any, context: Dict[str, Any]) -> ValidatorResult:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Hook called after validation completes."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"result"}),": Validation result"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content"}),": Original content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"context"}),": Validation context"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ValidatorResult"}),": Modified validation result"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"on_validation_error",children:"on_validation_error"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"async def on_validation_error(self, error: Exception, content: Any, context: Dict[str, Any]) -> Optional[ValidatorResult]:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Hook called when validation encounters an error."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"error"}),": Exception that occurred"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content"}),": Content being validated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"context"}),": Validation context"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Optional[ValidatorResult]"}),": Recovery result or None to re-raise"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"on_configuration_change",children:"on_configuration_change"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"async def on_configuration_change(self, old_config: Dict[str, Any], new_config: Dict[str, Any]) -> None:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Hook called when validator configuration changes."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"old_config"}),": Previous configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"new_config"}),": New configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"core-methods",children:"Core Methods"}),"\n",(0,r.jsx)(n.h4,{id:"validate_with_lifecycle",children:"validate_with_lifecycle"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"async def validate_with_lifecycle(self, content: Any, context: Dict[str, Any]) -> ValidatorResult:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Main validation method that orchestrates lifecycle hooks."}),"\n",(0,r.jsx)(n.p,{children:"This method provides the complete validation workflow including:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pre-validation hooks"}),"\n",(0,r.jsx)(n.li,{children:"Main validation logic"}),"\n",(0,r.jsx)(n.li,{children:"Post-validation hooks"}),"\n",(0,r.jsx)(n.li,{children:"Error handling"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content"}),": Content to be validated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"context"}),": Validation context"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ValidatorResult"}),": Complete validation result"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Raises:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ValidationError"}),": If validator is not initialized"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"configure_validation_rules",children:"configure_validation_rules"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def configure_validation_rules(self, rules: Dict[str, Any]) -> None:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Configure validation rules for this validator."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rules"}),": Dictionary of validation rules specific to this validator"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"configure_quality_thresholds",children:"configure_quality_thresholds"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def configure_quality_thresholds(self, thresholds: Dict[str, float]) -> None:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Configure quality thresholds for this validator."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"thresholds"}),": Dictionary of quality thresholds"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_validation_rule",children:"get_validation_rule"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_validation_rule(self, rule_name: str, default: Any = None) -> Any:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get a specific validation rule value."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rule_name"}),": Name of the rule"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"default"}),": Default value if rule not found"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Any"}),": Rule value or default"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_quality_threshold",children:"get_quality_threshold"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_quality_threshold(self, threshold_name: str, default: float = 70.0) -> float:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get a specific quality threshold."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"threshold_name"}),": Name of the threshold"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"default"}),": Default threshold value"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"float"}),": Threshold value or default"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"should_flag_for_human_review",children:"should_flag_for_human_review"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def should_flag_for_human_review(self, quality_score: float, threshold_name: str = "human_review") -> bool:\n'})}),"\n",(0,r.jsx)(n.p,{children:"Determine if content should be flagged for human review based on quality score."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"quality_score"}),": Calculated quality score (0-100)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"threshold_name"}),": Name of the threshold to check against"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bool"}),": True if content should be flagged for human review"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"create_finding",children:"create_finding"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def create_finding(self,\n                  finding_type: FindingType,\n                  severity: Severity,\n                  title: str,\n                  message: str,\n                  location: Optional[ContentLocation] = None,\n                  remediation: Optional[str] = None,\n                  confidence: float = 1.0,\n                  metadata: Optional[Dict[str, Any]] = None) -> Finding:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Helper method to create a Finding with validator context."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"finding_type"}),": Type of finding"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"severity"}),": Severity level"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"title"}),": Finding title"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"message"}),": Detailed message"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"location"}),": Content location (optional)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"remediation"}),": Suggested remediation (optional)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"confidence"}),": Confidence score 0-1"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metadata"}),": Additional metadata (optional)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Finding"}),": Configured Finding object"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_validator_info",children:"get_validator_info"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_validator_info(self) -> Dict[str, Any]:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get comprehensive validator information."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Dict[str, Any]"}),": Dictionary containing validator metadata"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"get_execution_context",children:"get_execution_context"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_execution_context(self) -> Dict[str, Any]:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get current execution context."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Dict[str, Any]"}),": Copy of current execution context"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"cleanup",children:"cleanup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"async def cleanup(self) -> None:\n"})}),"\n",(0,r.jsx)(n.p,{children:"Cleanup validator resources. Can be overridden by subclasses."}),"\n",(0,r.jsx)(n.h2,{id:"abstract-interfaces",children:"Abstract Interfaces"}),"\n",(0,r.jsx)(n.h3,{id:"validationengine",children:"ValidationEngine"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class ValidationEngine(ABC):\n"})}),"\n",(0,r.jsx)(n.p,{children:"Core validation engine interface for orchestrating validation processes."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"initialize(config: ValidationConfig) -> None"}),": Initialize the engine"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"register_validator(validator: ValidatorBase) -> None"}),": Register a validator"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validate_project(project_data: Any, project_id: str) -> ValidationResult"}),": Validate complete project"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validate_chapter(chapter_data: Any, project_context: Dict[str, Any]) -> ValidationResult"}),": Validate individual chapter"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_validation_status(validation_id: str) -> Optional[ValidationResult]"}),": Get validation status"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_registered_validators() -> List[Dict[str, str]]"}),": Get registered validators"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"validationinterface",children:"ValidationInterface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class ValidationInterface(ABC):\n"})}),"\n",(0,r.jsx)(n.p,{children:"Main interface for external systems to interact with validation."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validate_project(knowledge_base_path: str, project_id: Optional[str]) -> ValidationResult"}),": Main validation entry point"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validate_chapter(chapter_path: str, project_context: str, project_id: str) -> ValidationResult"}),": Validate chapter"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_system_health() -> Dict[str, Any]"}),": Get system health status"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_validation_history(project_id: str) -> List[ValidationResult]"}),": Get validation history"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"configure_validation_rules(project_id: str, rules: Dict[str, Any]) -> bool"}),": Configure validation rules"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"resourcemanager",children:"ResourceManager"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class ResourceManager(ABC):\n"})}),"\n",(0,r.jsx)(n.p,{children:"Interface for managing validation resources."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"create_workspace(project_id: str) -> str"}),": Create unique workspace"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cleanup_workspace(workspace_path: str) -> None"}),": Clean up workspace"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_unique_temp_file(workspace: str, suffix: str) -> str"}),": Get unique temp file"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"healthmonitor",children:"HealthMonitor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class HealthMonitor(ABC):\n"})}),"\n",(0,r.jsx)(n.p,{children:"Interface for system health monitoring."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_health_status() -> Dict[str, Any]"}),": Get current system health"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_metrics() -> Dict[str, Any]"}),": Get system metrics"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"check_ai_connectivity() -> bool"}),": Check AI service connectivity"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"aiusagetracker",children:"AIUsageTracker"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class AIUsageTracker(ABC):\n"})}),"\n",(0,r.jsx)(n.p,{children:"Interface for tracking AI usage and costs."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"track_request(project_id: str, validator_id: str, tokens_used: int, cost: float, model: str) -> None"}),": Track AI request"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_project_usage(project_id: str) -> Dict[str, Any]"}),": Get project usage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_usage_report(project_id: str) -> Dict[str, Any]"}),": Generate usage report"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"reportgenerator",children:"ReportGenerator"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class ReportGenerator(ABC):\n"})}),"\n",(0,r.jsx)(n.p,{children:"Interface for generating validation reports."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"generate_report(result: ValidationResult, format: str) -> Dict[str, Any]"}),": Generate report"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_supported_formats() -> List[str]"}),": Get supported formats"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"exception-classes",children:"Exception Classes"}),"\n",(0,r.jsx)(n.h3,{id:"validationerror",children:"ValidationError"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class ValidationError(Exception):\n"})}),"\n",(0,r.jsx)(n.p,{children:"Base exception for validation errors."}),"\n",(0,r.jsx)(n.h3,{id:"validatornotfounderror",children:"ValidatorNotFoundError"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class ValidatorNotFoundError(ValidationError):\n"})}),"\n",(0,r.jsx)(n.p,{children:"Raised when a validator is not found."}),"\n",(0,r.jsx)(n.h3,{id:"configurationerror",children:"ConfigurationError"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class ConfigurationError(ValidationError):\n"})}),"\n",(0,r.jsx)(n.p,{children:"Raised when configuration is invalid."}),"\n",(0,r.jsx)(n.h3,{id:"resourceerror",children:"ResourceError"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class ResourceError(ValidationError):\n"})}),"\n",(0,r.jsx)(n.p,{children:"Raised when resource management fails."}),"\n",(0,r.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,r.jsx)(n.h3,{id:"creating-a-custom-validator",children:"Creating a Custom Validator"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from libriscribe2.validation import ValidatorBase, ValidatorResult, Finding, FindingType, Severity\n\nclass CustomContentValidator(ValidatorBase):\n    def __init__(self):\n        super().__init__("custom_content", "Custom Content Validator", "1.0.0")\n\n    async def initialize(self, config: Dict[str, Any]) -> None:\n        """Initialize validator with configuration"""\n        self.config = config\n        self.is_initialized = True\n\n        # Configure validation rules\n        self.configure_validation_rules({\n            "min_word_count": config.get("min_word_count", 1000),\n            "check_grammar": config.get("check_grammar", True)\n        })\n\n        # Configure quality thresholds\n        self.configure_quality_thresholds({\n            "grammar_score": config.get("grammar_threshold", 80.0),\n            "readability_score": config.get("readability_threshold", 70.0)\n        })\n\n    async def validate(self, content: Any, context: Dict[str, Any]) -> ValidatorResult:\n        """Perform validation on content"""\n        findings = []\n\n        # Check word count\n        word_count = len(content.split()) if isinstance(content, str) else 0\n        min_words = self.get_validation_rule("min_word_count", 1000)\n\n        if word_count < min_words:\n            finding = self.create_finding(\n                finding_type=FindingType.CONTENT_QUALITY,\n                severity=Severity.HIGH,\n                title="Insufficient Word Count",\n                message=f"Content has {word_count} words, minimum required is {min_words}",\n                remediation="Add more content to meet minimum word count requirement",\n                confidence=1.0\n            )\n            findings.append(finding)\n\n        # Calculate quality score\n        quality_score = max(0, 100 - len(findings) * 20)\n\n        return ValidatorResult(\n            validator_id=self.validator_id,\n            status=ValidationStatus.COMPLETED,\n            findings=findings,\n            metrics={\n                "word_count": word_count,\n                "quality_score": quality_score\n            }\n        )\n\n    def get_supported_content_types(self) -> List[str]:\n        """Return supported content types"""\n        return ["chapter", "manuscript", "scene"]\n\n    async def pre_validation_hook(self, content: Any, context: Dict[str, Any]) -> Dict[str, Any]:\n        """Pre-validation processing"""\n        # Add preprocessing logic here\n        context["preprocessed"] = True\n        return context\n\n    async def post_validation_hook(self, result: ValidatorResult, content: Any, context: Dict[str, Any]) -> ValidatorResult:\n        """Post-validation processing"""\n        # Add post-processing logic here\n        result.metadata["post_processed"] = True\n        return result\n'})}),"\n",(0,r.jsx)(n.h3,{id:"using-lifecycle-validation",children:"Using Lifecycle Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def validate_with_lifecycle_example():\n    # Create validator\n    validator = CustomContentValidator()\n\n    # Initialize with configuration\n    config = {\n        "min_word_count": 1500,\n        "check_grammar": True,\n        "grammar_threshold": 85.0\n    }\n    await validator.initialize(config)\n\n    # Validate content using lifecycle method\n    content = "This is sample content to validate..."\n    context = {"project_id": "my_book", "chapter_id": "chapter_1"}\n\n    result = await validator.validate_with_lifecycle(content, context)\n\n    # Process results\n    print(f"Validation Status: {result.status}")\n    print(f"Findings: {len(result.findings)}")\n    for finding in result.findings:\n        print(f"  - {finding.title}: {finding.message}")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"error-handling-with-recovery",children:"Error Handling with Recovery"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class RobustValidator(ValidatorBase):\n    async def on_validation_error(self, error: Exception, content: Any, context: Dict[str, Any]) -> Optional[ValidatorResult]:\n        """Handle validation errors with recovery"""\n        if isinstance(error, ConnectionError):\n            # Retry with fallback logic\n            return ValidatorResult(\n                validator_id=self.validator_id,\n                status=ValidationStatus.COMPLETED,\n                findings=[self.create_finding(\n                    finding_type=FindingType.SYSTEM_ERROR,\n                    severity=Severity.LOW,\n                    title="Connection Issue Recovered",\n                    message="Validation completed using fallback method",\n                    confidence=0.8\n                )]\n            )\n\n        # Let other errors propagate\n        return None\n'})}),"\n",(0,r.jsx)(n.h3,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Configure validator rules dynamically\nvalidator = CustomContentValidator()\nawait validator.initialize({})\n\n# Update validation rules\nvalidator.configure_validation_rules({\n    "min_word_count": 2000,\n    "check_spelling": True,\n    "require_citations": True\n})\n\n# Update quality thresholds\nvalidator.configure_quality_thresholds({\n    "overall_quality": 85.0,\n    "grammar_score": 90.0,\n    "readability_score": 75.0\n})\n\n# Check if human review is needed\nquality_score = 65.0\nneeds_review = validator.should_flag_for_human_review(quality_score)\nprint(f"Human review required: {needs_review}")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Initialization"}),": Always call ",(0,r.jsx)(n.code,{children:"initialize()"})," before using a validator"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Handling"}),": Implement ",(0,r.jsx)(n.code,{children:"on_validation_error()"})," for robust error recovery"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lifecycle Hooks"}),": Use hooks for preprocessing and postprocessing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration"}),": Use ",(0,r.jsx)(n.code,{children:"configure_validation_rules()"})," and ",(0,r.jsx)(n.code,{children:"configure_quality_thresholds()"})," for dynamic configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Findings"}),": Use ",(0,r.jsx)(n.code,{children:"create_finding()"})," helper for consistent finding creation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cleanup"}),": Implement ",(0,r.jsx)(n.code,{children:"cleanup()"})," for resource management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Context"}),": Use execution context for sharing data between hooks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Quality Scores"}),": Implement consistent quality scoring across validators"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Human Review"}),": Use ",(0,r.jsx)(n.code,{children:"should_flag_for_human_review()"})," for consistent review thresholds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Metadata"}),": Include relevant metadata in results for debugging and analysis"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(6540);const r={},l=t.createContext(r);function s(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);