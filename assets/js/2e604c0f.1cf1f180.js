"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[139],{3188:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"api/mock-llm-client-api","title":"Mock LLM Client API Documentation","description":"Overview","source":"@site/docs/api/mock-llm-client-api.md","sourceDirName":"api","slug":"/api/mock-llm-client-api","permalink":"/libriscribe2/docs/api/mock-llm-client-api","draft":false,"unlisted":false,"editUrl":"https://github.com/guerra2fernando/libriscribe2/tree/main/docs/docs/api/mock-llm-client-api.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"LLM Client - Function and Class Signatures","permalink":"/libriscribe2/docs/api/llm-client-signatures"},"next":{"title":"Performance Improvements - Function Signatures","permalink":"/libriscribe2/docs/api/performance-improvements-signatures"}}');var r=t(4848),s=t(8453);const c={},l="Mock LLM Client API Documentation",o={},a=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Class Definition",id:"class-definition",level:2},{value:"Constructor Parameters",id:"constructor-parameters",level:2},{value:"Mock Configuration",id:"mock-configuration",level:2},{value:"Default Configuration",id:"default-configuration",level:3},{value:"Core Methods",id:"core-methods",level:2},{value:"generate_content()",id:"generate_content",level:3},{value:"generate_content_with_json_repair()",id:"generate_content_with_json_repair",level:3},{value:"get_model_for_prompt_type()",id:"get_model_for_prompt_type",level:3},{value:"Configuration Methods",id:"configuration-methods",level:2},{value:"update_mock_config()",id:"update_mock_config",level:3},{value:"get_mock_config()",id:"get_mock_config",level:3},{value:"Language-Specific Content Generation",id:"language-specific-content-generation",level:2},{value:"English Content",id:"english-content",level:3},{value:"French Content",id:"french-content",level:3},{value:"Spanish Content",id:"spanish-content",level:3},{value:"Content Type Examples",id:"content-type-examples",level:2},{value:"Character Generation",id:"character-generation",level:3},{value:"Concept Generation",id:"concept-generation",level:3},{value:"Outline Generation",id:"outline-generation",level:3},{value:"Worldbuilding Generation",id:"worldbuilding-generation",level:3},{value:"Lorem Ipsum Generation",id:"lorem-ipsum-generation",level:2},{value:"_generate_lorem_ipsum()",id:"_generate_lorem_ipsum",level:3},{value:"_generate_french_lorem_ipsum()",id:"_generate_french_lorem_ipsum",level:3},{value:"_generate_spanish_lorem_ipsum()",id:"_generate_spanish_lorem_ipsum",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Multi-Language Usage",id:"multi-language-usage",level:3},{value:"Custom Configuration",id:"custom-configuration",level:3},{value:"Testing Integration",id:"testing-integration",level:3},{value:"Performance Testing",id:"performance-testing",level:3},{value:"Integration with LLMClient",id:"integration-with-llmclient",level:2},{value:"Security Features",id:"security-features",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Extending the Mock Client",id:"extending-the-mock-client",level:2},{value:"Adding New Prompt Types",id:"adding-new-prompt-types",level:3},{value:"Adding New Languages",id:"adding-new-languages",level:3},{value:"Custom Response Templates",id:"custom-response-templates",level:3},{value:"See Also",id:"see-also",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"mock-llm-client-api-documentation",children:"Mock LLM Client API Documentation"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"MockLLMClient"})," class provides a testing-focused implementation of the LLM interface that generates deterministic responses without making actual API calls. It's designed for development, testing, and demonstration purposes, offering realistic content generation with configurable parameters."]}),"\n",(0,r.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deterministic Responses"}),": Consistent output for testing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-Language Support"}),": French, Spanish, and English content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configurable Content Length"}),": Adjustable word counts for different content types"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Realistic Content Generation"}),": Lorem ipsum with language-specific vocabulary"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"JSON Response Simulation"}),": Structured responses for different prompt types"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No API Costs"}),": Free testing without external API calls"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"LiteLLM Metadata Support"}),": Compatible with LiteLLM tagging system"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"class-definition",children:"Class Definition"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class MockLLMClient:\n    """A mock LLM client for testing purposes."""\n\n    def __init__(\n        self,\n        llm_provider: str = "mock",\n        model_config: dict[str, str] | None = None,\n        environment: str = DEFAULT_ENVIRONMENT,\n        project_name: str = "",\n        user: str | None = None,\n        mock_config: MockConfig | None = None,\n    )\n'})}),"\n",(0,r.jsx)(n.h2,{id:"constructor-parameters",children:"Constructor Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"llm_provider"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"mock"'})}),(0,r.jsx)(n.td,{children:"Provider identifier"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"model_config"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"dict[str, str] | None"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"None"})}),(0,r.jsx)(n.td,{children:"Model mapping for prompt types"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"environment"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"production"'})}),(0,r.jsx)(n.td,{children:"Environment tag"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"project_name"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'""'})}),(0,r.jsx)(n.td,{children:"Project name for metadata"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"user"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str | None"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"None"})}),(0,r.jsx)(n.td,{children:"User identifier"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mock_config"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MockConfig | None"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"None"})}),(0,r.jsx)(n.td,{children:"Custom mock configuration"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"mock-configuration",children:"Mock Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"MockConfig"})," TypedDict defines configurable parameters:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class MockConfig(TypedDict):\n    scene_length: dict[str, int]\n    chapter_length: dict[str, int]\n    lorem_ipsum_words: list[str]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"default-configuration",children:"Default Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'MOCK_CONFIG: MockConfig = {\n    "scene_length": {\n        "min_words": 150,\n        "max_words": 300,\n    },\n    "chapter_length": {\n        "min_words": 800,\n        "max_words": 1500,\n    },\n    "lorem_ipsum_words": [\n        "lorem", "ipsum", "dolor", "sit", "amet",\n        # ... extensive word list\n    ],\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"core-methods",children:"Core Methods"}),"\n",(0,r.jsx)(n.h3,{id:"generate_content",children:"generate_content()"}),"\n",(0,r.jsx)(n.p,{children:"Generate mock content based on prompt type and language."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def generate_content(\n    self,\n    prompt: str,\n    prompt_type: str = "default",\n    temperature: float = DEFAULT_TEMPERATURE,\n    language: str = "English",\n    timeout: int | None = None,\n) -> str\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prompt"})," (str): Input prompt (used for context)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prompt_type"})," (str): Type of content to generate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"temperature"})," (float): Temperature parameter (affects randomness)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"language"}),' (str): Target language ("English", "French", "Spanish")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"timeout"})," (int | None): Timeout parameter (ignored in mock)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"str"}),": Generated mock content"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Supported Prompt Types:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"questions"'}),": JSON formatted questions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"concept"'}),": Book concept with title, logline, description"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"outline"'}),": Chapter and scene outline"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"scene_outline"'}),": Detailed scene breakdown"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"character"'}),": Character profiles in JSON format"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"worldbuilding"'}),": World building elements"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"chapter"'}),": Full chapter content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"scene"'}),": Scene content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"formatting"'}),": Formatted book content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"critique"'}),": Content critique"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"refine"'}),": Refined concept"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"keywords"'}),": SEO keywords"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"plagiarism_check"'}),": Plagiarism analysis"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"fact_check"'}),": Fact checking results"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"content_review"'}),": Content review"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'mock_client = MockLLMClient()\n\n# Generate English character\ncharacter = mock_client.generate_content(\n    "Create a fantasy character",\n    prompt_type="character",\n    language="English"\n)\n\n# Generate French chapter\nchapter = mock_client.generate_content(\n    "Write a chapter",\n    prompt_type="chapter",\n    language="French"\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"generate_content_with_json_repair",children:"generate_content_with_json_repair()"}),"\n",(0,r.jsx)(n.p,{children:"Generate content with simulated JSON repair functionality."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def generate_content_with_json_repair(\n    self,\n    original_prompt: str,\n    prompt_type: str = "default",\n    temperature: float = DEFAULT_TEMPERATURE,\n) -> str\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"original_prompt"})," (str): Original prompt text"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prompt_type"})," (str): Type of content to generate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"temperature"})," (float): Temperature parameter"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"str"}),": Generated content (always valid JSON for applicable types)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'content = mock_client.generate_content_with_json_repair(\n    "Generate character data",\n    prompt_type="character"\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get_model_for_prompt_type",children:"get_model_for_prompt_type()"}),"\n",(0,r.jsx)(n.p,{children:"Get the model name for a specific prompt type."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_model_for_prompt_type(self, prompt_type: str) -> str\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prompt_type"})," (str): The prompt type"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"str"}),": Model name (from model_config or default)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'model = mock_client.get_model_for_prompt_type("creative")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"configuration-methods",children:"Configuration Methods"}),"\n",(0,r.jsx)(n.h3,{id:"update_mock_config",children:"update_mock_config()"}),"\n",(0,r.jsx)(n.p,{children:"Update mock configuration settings."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def update_mock_config(self, new_config: MockConfig) -> None\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"new_config"})," (MockConfig): New configuration to merge"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'new_config = {\n    "scene_length": {"min_words": 200, "max_words": 400},\n    "chapter_length": {"min_words": 1000, "max_words": 2000}\n}\nmock_client.update_mock_config(new_config)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"get_mock_config",children:"get_mock_config()"}),"\n",(0,r.jsx)(n.p,{children:"Get current mock configuration."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get_mock_config(self) -> MockConfig\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"MockConfig"}),": Copy of current configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"config = mock_client.get_mock_config()\nprint(f\"Scene length: {config['scene_length']}\")\n"})}),"\n",(0,r.jsx)(n.h2,{id:"language-specific-content-generation",children:"Language-Specific Content Generation"}),"\n",(0,r.jsx)(n.p,{children:"The MockLLMClient supports multiple languages with appropriate vocabulary:"}),"\n",(0,r.jsx)(n.h3,{id:"english-content",children:"English Content"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Standard lorem ipsum with English words"}),"\n",(0,r.jsx)(n.li,{children:"Realistic character names and descriptions"}),"\n",(0,r.jsx)(n.li,{children:"English worldbuilding terminology"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"french-content",children:"French Content"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"French vocabulary and grammar patterns"}),"\n",(0,r.jsx)(n.li,{children:"French character names (Pierre Dubois, Marie Laurent)"}),"\n",(0,r.jsx)(n.li,{children:"French worldbuilding terms"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"spanish-content",children:"Spanish Content"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Spanish vocabulary and grammar patterns"}),"\n",(0,r.jsx)(n.li,{children:"Spanish character names (Carlos Mendoza, Mar\xeda Gonz\xe1lez)"}),"\n",(0,r.jsx)(n.li,{children:"Spanish worldbuilding terms"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"content-type-examples",children:"Content Type Examples"}),"\n",(0,r.jsx)(n.h3,{id:"character-generation",children:"Character Generation"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"English:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "name": "Mock Character 1",\n        "age": "25",\n        "physical_description": "A brave mock character with brown hair and green eyes.",\n        "personality_traits": "Brave, Loyal, Impulsive, Intelligent, Compassionate",\n        "background": "Born in a modest family, always dreamed of adventure.",\n        "motivations": "Protect family and discover new horizons.",\n        "relationships": "Faithful friend and mentor to young adventurers.",\n        "role": "Main protagonist",\n        "internal_conflicts": "Doubt between family safety and adventure call.",\n        "external_conflicts": "Faces mysterious forces threatening his village.",\n        "character_arc": "Evolves from timid young man to confident hero."\n    }\n]\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"French:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'[\n    {\n        "name": "Pierre Dubois",\n        "age": "25",\n        "physical_description": "Un jeune homme aux cheveux bruns et aux yeux verts.",\n        "personality_traits": "Courageux, Loyal, Impulsif, Intelligent, Compatissant",\n        "background": "N\xe9 dans une famille modeste, Pierre a toujours r\xeav\xe9 d\'aventure.",\n        "motivations": "Prot\xe9ger sa famille et d\xe9couvrir de nouveaux horizons.",\n        "relationships": "Fid\xe8le ami de Marie et mentor de jeunes aventuriers.",\n        "role": "Protagoniste principal"\n    }\n]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"concept-generation",children:"Concept Generation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "title": "Mock Concept Title",\n    "logline": "A mock logline for a mock book.",\n    "description": "This is a mock description of a mock book concept, generated by the mock LLM client."\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"outline-generation",children:"Outline Generation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",children:"# Mock Outline\n## Chapter 1: The Beginning\n- Scene 1.1: Mock opening\n- Scene 1.2: Mock conflict introduction\n## Chapter 2: The Middle\n- Scene 2.1: Mock rising action\n- Scene 2.2: Mock climax\n## Chapter 3: The End\n- Scene 3.1: Mock falling action\n- Scene 3.2: Mock resolution\n"})}),"\n",(0,r.jsx)(n.h3,{id:"worldbuilding-generation",children:"Worldbuilding Generation"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"English:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "geography": "Mock mountains and rivers.",\n    "culture_and_society": "Mock traditions and customs."\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"French:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "geography": "Montagnes majestueuses et rivi\xe8res sinueuses traversent ce paysage fantastique.",\n    "culture_and_society": "Traditions ancestrales et coutumes myst\xe9rieuses rythment la vie quotidienne."\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"lorem-ipsum-generation",children:"Lorem Ipsum Generation"}),"\n",(0,r.jsx)(n.p,{children:"The client includes sophisticated lorem ipsum generators for different languages:"}),"\n",(0,r.jsx)(n.h3,{id:"_generate_lorem_ipsum",children:"_generate_lorem_ipsum()"}),"\n",(0,r.jsx)(n.p,{children:"Generate English lorem ipsum text."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def _generate_lorem_ipsum(self, min_words: int, max_words: int) -> str\n"})}),"\n",(0,r.jsx)(n.h3,{id:"_generate_french_lorem_ipsum",children:"_generate_french_lorem_ipsum()"}),"\n",(0,r.jsx)(n.p,{children:"Generate French lorem ipsum text."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def _generate_french_lorem_ipsum(self, min_words: int, max_words: int) -> str\n"})}),"\n",(0,r.jsx)(n.h3,{id:"_generate_spanish_lorem_ipsum",children:"_generate_spanish_lorem_ipsum()"}),"\n",(0,r.jsx)(n.p,{children:"Generate Spanish lorem ipsum text."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def _generate_spanish_lorem_ipsum(self, min_words: int, max_words: int) -> str\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Features:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cryptographically secure random word selection"}),"\n",(0,r.jsx)(n.li,{children:"Realistic paragraph structure (20-50 words per paragraph)"}),"\n",(0,r.jsx)(n.li,{children:"Proper capitalization and punctuation"}),"\n",(0,r.jsx)(n.li,{children:"Language-appropriate vocabulary"}),"\n",(0,r.jsx)(n.li,{children:"Configurable length ranges"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,r.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from libriscribe2.utils.mock_llm_client import MockLLMClient\n\n# Initialize mock client\nmock_client = MockLLMClient(\n    environment="testing",\n    project_name="test-book"\n)\n\n# Generate different types of content\nconcept = mock_client.generate_content("Create a book concept", "concept")\ncharacters = mock_client.generate_content("Generate characters", "character")\nchapter = mock_client.generate_content("Write a chapter", "chapter")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"multi-language-usage",children:"Multi-Language Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Generate content in different languages\nenglish_char = mock_client.generate_content(\n    "Create a character",\n    "character",\n    language="English"\n)\n\nfrench_char = mock_client.generate_content(\n    "Cr\xe9er un personnage",\n    "character",\n    language="French"\n)\n\nspanish_char = mock_client.generate_content(\n    "Crear un personaje",\n    "character",\n    language="Spanish"\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"custom-configuration",children:"Custom Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Create custom configuration\ncustom_config = {\n    "scene_length": {"min_words": 100, "max_words": 200},\n    "chapter_length": {"min_words": 500, "max_words": 1000},\n    "lorem_ipsum_words": ["custom", "word", "list"]\n}\n\nmock_client = MockLLMClient(mock_config=custom_config)\n\n# Update configuration later\nmock_client.update_mock_config({\n    "scene_length": {"min_words": 300, "max_words": 500}\n})\n'})}),"\n",(0,r.jsx)(n.h3,{id:"testing-integration",children:"Testing Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\nfrom libriscribe2.utils.mock_llm_client import MockLLMClient\n\n@pytest.fixture\ndef mock_llm():\n    return MockLLMClient(environment="testing")\n\ndef test_character_generation(mock_llm):\n    character = mock_llm.generate_content("Generate character", "character")\n    assert "Mock Character" in character\n    assert "name" in character\n    assert "age" in character\n\ndef test_multilingual_support(mock_llm):\n    french_content = mock_llm.generate_content("Test", "character", language="French")\n    assert "Pierre" in french_content or "Marie" in french_content\n\n    spanish_content = mock_llm.generate_content("Test", "character", language="Spanish")\n    assert "Carlos" in spanish_content or "Mar\xeda" in spanish_content\n'})}),"\n",(0,r.jsx)(n.h3,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import time\n\nmock_client = MockLLMClient()\n\n# Test generation speed\nstart_time = time.time()\nfor i in range(100):\n    content = mock_client.generate_content(f"Test {i}", "chapter")\nduration = time.time() - start_time\n\nprint(f"Generated 100 chapters in {duration:.2f} seconds")\nprint(f"Average: {duration/100:.4f} seconds per chapter")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-llmclient",children:"Integration with LLMClient"}),"\n",(0,r.jsx)(n.p,{children:"The MockLLMClient is designed to be used seamlessly with the main LLMClient:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from libriscribe2.utils.llm_client import LLMClient\n\n# Use mock provider\nclient = LLMClient(\n    provider="mock",\n    model_config={"creative": "mock-gpt-4", "general": "mock-gpt-3.5"},\n    project_name="test-project"\n)\n\n# Generate content (uses MockLLMClient internally)\ncontent = await client.generate_content(\n    "Write a story",\n    prompt_type="creative"\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"security-features",children:"Security Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input Sanitization"}),": Provider name sanitization to prevent log injection"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cryptographically Secure Random"}),": Uses ",(0,r.jsx)(n.code,{children:"secrets"})," module for random generation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Safe Logging"}),": Prevents sensitive data exposure in logs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Safety"}),": No persistent state between requests"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use for Testing"}),": Ideal for unit tests and integration tests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Language Testing"}),": Test multi-language functionality without API costs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Benchmarking"}),": Measure application performance without network latency"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Development"}),": Develop features without consuming API quotas"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration Testing"}),": Test different content lengths and formats"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deterministic Testing"}),": Rely on consistent outputs for test assertions"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not Real AI"}),": Generates template-based content, not intelligent responses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Limited Creativity"}),": Responses follow predefined patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No Learning"}),": Cannot adapt or improve based on feedback"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Template-Based"}),": Content quality depends on predefined templates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Language Support"}),": Limited to three languages (English, French, Spanish)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"extending-the-mock-client",children:"Extending the Mock Client"}),"\n",(0,r.jsx)(n.h3,{id:"adding-new-prompt-types",children:"Adding New Prompt Types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# In generate_content method, add new case:\nelif prompt_type == "new_type":\n    return "Mock response for new type"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"adding-new-languages",children:"Adding New Languages"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def _generate_italian_lorem_ipsum(self, min_words: int, max_words: int) -> str:\n    italian_words = ["ciao", "mondo", "bella", "vita", ...]\n    # Implementation similar to other language generators\n'})}),"\n",(0,r.jsx)(n.h3,{id:"custom-response-templates",children:"Custom Response Templates"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def generate_custom_response(self, prompt_type: str, **kwargs) -> str:\n    templates = {\n        "custom_type": "Custom template with {variable}",\n    }\n    return templates.get(prompt_type, "Default response").format(**kwargs)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/libriscribe2/docs/api/llm-client-api",children:"LLM Client API"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/libriscribe2/docs/development/ai-testing-best-practices",children:"Testing Guide"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/libriscribe2/docs/user-guide/configuration",children:"Configuration Guide"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function c(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);