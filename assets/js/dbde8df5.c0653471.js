"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[955],{6547:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api/performance-improvements-signatures","title":"Performance Improvements - Function Signatures","description":"Complete API Reference","source":"@site/docs/api/performance-improvements-signatures.md","sourceDirName":"api","slug":"/api/performance-improvements-signatures","permalink":"/libriscribe2/docs/api/performance-improvements-signatures","draft":false,"unlisted":false,"editUrl":"https://github.com/guerra2fernando/libriscribe2/tree/main/docs/docs/api/performance-improvements-signatures.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Mock LLM Client API Documentation","permalink":"/libriscribe2/docs/api/mock-llm-client-api"},"next":{"title":"Performance Improvements Module - Documentation Summary","permalink":"/libriscribe2/docs/api/performance-improvements-summary"}}');var r=t(4848),a=t(8453);const i={},o="Performance Improvements - Function Signatures",l={},c=[{value:"Complete API Reference",id:"complete-api-reference",level:2},{value:"PerformanceMetrics Class",id:"performancemetrics-class",level:3},{value:"Constructor",id:"constructor",level:4},{value:"Properties",id:"properties",level:4},{value:"Methods",id:"methods",level:4},{value:"AsyncPerformanceMonitor Class",id:"asyncperformancemonitor-class",level:3},{value:"Constructor",id:"constructor-1",level:4},{value:"Methods",id:"methods-1",level:4},{value:"AgentCache Class",id:"agentcache-class",level:3},{value:"Constructor",id:"constructor-2",level:4},{value:"Methods",id:"methods-2",level:4},{value:"StringProcessor Class",id:"stringprocessor-class",level:3},{value:"Static Methods",id:"static-methods",level:4},{value:"AsyncTaskManager Class",id:"asynctaskmanager-class",level:3},{value:"Constructor",id:"constructor-3",level:4},{value:"Methods",id:"methods-3",level:4},{value:"FileProcessor Class",id:"fileprocessor-class",level:3},{value:"Constructor",id:"constructor-4",level:4},{value:"Methods",id:"methods-4",level:4},{value:"JSONProcessor Class",id:"jsonprocessor-class",level:3},{value:"Constructor",id:"constructor-5",level:4},{value:"Methods",id:"methods-5",level:4},{value:"MemoryProfiler Class",id:"memoryprofiler-class",level:3},{value:"Constructor",id:"constructor-6",level:4},{value:"Methods",id:"methods-6",level:4},{value:"PerformanceUtils Class",id:"performanceutils-class",level:3},{value:"Static Methods",id:"static-methods-1",level:4},{value:"Type Definitions",id:"type-definitions",level:2},{value:"Type Variables",id:"type-variables",level:3},{value:"Import Requirements",id:"import-requirements",level:3},{value:"Return Type Patterns",id:"return-type-patterns",level:2},{value:"Common Return Types",id:"common-return-types",level:3},{value:"Parameter Patterns",id:"parameter-patterns",level:3},{value:"Usage Pattern Examples",id:"usage-pattern-examples",level:2},{value:"Basic Performance Monitoring",id:"basic-performance-monitoring",level:3},{value:"Async Task Management",id:"async-task-management",level:3},{value:"String Processing",id:"string-processing",level:3},{value:"File Operations",id:"file-operations",level:3},{value:"JSON Processing",id:"json-processing",level:3},{value:"Memory Profiling",id:"memory-profiling",level:3},{value:"Performance Utilities",id:"performance-utilities",level:3},{value:"Caching",id:"caching",level:3},{value:"Error Handling Patterns",id:"error-handling-patterns",level:2},{value:"Integration Patterns",id:"integration-patterns",level:2},{value:"With LibriScribe2 Components",id:"with-libriscribe2-components",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"performance-improvements---function-signatures",children:"Performance Improvements - Function Signatures"})}),"\n",(0,r.jsx)(n.h2,{id:"complete-api-reference",children:"Complete API Reference"}),"\n",(0,r.jsx)(n.h3,{id:"performancemetrics-class",children:"PerformanceMetrics Class"}),"\n",(0,r.jsx)(n.h4,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@dataclass(slots=True)\nclass PerformanceMetrics:\n    operation_name: str\n    start_time: float = field(default_factory=time.time)\n    end_time: float = 0.0\n    success: bool = True\n    error_message: str = ""\n'})}),"\n",(0,r.jsx)(n.h4,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@property\ndef duration(self) -> float\n"})}),"\n",(0,r.jsx)(n.h4,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def complete(self, success: bool = True, error_message: str = "") -> None\n'})}),"\n",(0,r.jsx)(n.h3,{id:"asyncperformancemonitor-class",children:"AsyncPerformanceMonitor Class"}),"\n",(0,r.jsx)(n.h4,{id:"constructor-1",children:"Constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def __init__(self) -> None\n"})}),"\n",(0,r.jsx)(n.h4,{id:"methods-1",children:"Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"async def monitor_operation(\n    self,\n    operation_name: str,\n    operation: Callable[[], Awaitable[T]],\n    timeout: float = DEFAULT_TIMEOUT\n) -> T\n\ndef get_performance_summary(self) -> dict[str, Any]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"agentcache-class",children:"AgentCache Class"}),"\n",(0,r.jsx)(n.h4,{id:"constructor-2",children:"Constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def __init__(self) -> None\n"})}),"\n",(0,r.jsx)(n.h4,{id:"methods-2",children:"Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def get(self, key: str) -> Any | None\n\ndef set(self, key: str, value: Any) -> None\n\ndef get_cache_stats(self) -> dict[str, Any]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"stringprocessor-class",children:"StringProcessor Class"}),"\n",(0,r.jsx)(n.h4,{id:"static-methods",children:"Static Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@staticmethod\ndef fast_string_concatenation(strings: list[str]) -> str\n\n@staticmethod\ndef efficient_string_formatting(template: str, **kwargs: Any) -> str\n\n@staticmethod\ndef fast_string_search(text: str, patterns: list[str]) -> list[str]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"asynctaskmanager-class",children:"AsyncTaskManager Class"}),"\n",(0,r.jsx)(n.h4,{id:"constructor-3",children:"Constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def __init__(self) -> None\n"})}),"\n",(0,r.jsx)(n.h4,{id:"methods-3",children:"Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"async def execute_parallel_tasks(\n    self,\n    tasks: list[Callable[[], Awaitable[T]]],\n    max_concurrent: int = 10\n) -> list[T]\n\nasync def execute_with_retry(\n    self,\n    task: Callable[[], Awaitable[T]],\n    max_retries: int = 3,\n    delay: float = 1.0\n) -> T\n"})}),"\n",(0,r.jsx)(n.h3,{id:"fileprocessor-class",children:"FileProcessor Class"}),"\n",(0,r.jsx)(n.h4,{id:"constructor-4",children:"Constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def __init__(self) -> None\n"})}),"\n",(0,r.jsx)(n.h4,{id:"methods-4",children:"Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"async def read_file_async(self, file_path: Path) -> str\n\nasync def write_file_async(self, file_path: Path, content: str) -> None\n\ndef process_files_batch(\n    self,\n    file_paths: list[Path],\n    processor: Callable[[str], str]\n) -> dict[Path, str]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"jsonprocessor-class",children:"JSONProcessor Class"}),"\n",(0,r.jsx)(n.h4,{id:"constructor-5",children:"Constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def __init__(self) -> None\n"})}),"\n",(0,r.jsx)(n.h4,{id:"methods-5",children:"Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def fast_json_parse(self, json_str: str) -> dict[str, Any]\n\ndef fast_json_serialize(self, data: dict[str, Any]) -> str\n\ndef validate_json_structure(\n    self,\n    data: dict[str, Any],\n    required_keys: list[str]\n) -> bool\n"})}),"\n",(0,r.jsx)(n.h3,{id:"memoryprofiler-class",children:"MemoryProfiler Class"}),"\n",(0,r.jsx)(n.h4,{id:"constructor-6",children:"Constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def __init__(self) -> None\n"})}),"\n",(0,r.jsx)(n.h4,{id:"methods-6",children:"Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def take_snapshot(self, label: str) -> None\n\ndef get_memory_summary(self) -> dict[str, Any]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"performanceutils-class",children:"PerformanceUtils Class"}),"\n",(0,r.jsx)(n.h4,{id:"static-methods-1",children:"Static Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@staticmethod\ndef measure_execution_time(func: Callable[[], T]) -> tuple[T, float]\n\n@staticmethod\nasync def measure_async_execution_time(\n    func: Callable[[], Awaitable[T]]\n) -> tuple[T, float]\n\n@staticmethod\ndef optimize_list_operations(items: list[Any]) -> list[Any]\n\n@staticmethod\ndef fast_dict_merge(dicts: list[dict[str, Any]]) -> dict[str, Any]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"type-definitions",children:"Type Definitions"}),"\n",(0,r.jsx)(n.h3,{id:"type-variables",children:"Type Variables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'T = TypeVar("T")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"import-requirements",children:"Import Requirements"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import asyncio\nimport json\nimport logging\nimport time\nfrom collections import defaultdict\nfrom collections.abc import Awaitable, Callable, Iterator\nfrom dataclasses import dataclass, field\nfrom pathlib import Path\nfrom typing import Any, TypeVar, cast\nfrom weakref import WeakValueDictionary\n\nfrom ..settings import DEFAULT_TIMEOUT\n"})}),"\n",(0,r.jsx)(n.h2,{id:"return-type-patterns",children:"Return Type Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"common-return-types",children:"Common Return Types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Synchronous operations\n-> None                          # Initialization, configuration\n-> str                          # String processing, file content\n-> bool                         # Validation, checks\n-> float                        # Timing, measurements\n-> dict[str, Any]              # Statistics, summaries\n-> list[str]                   # String collections\n-> list[Any]                   # Generic collections\n-> tuple[T, float]             # Result with timing\n\n# Asynchronous operations\n-> Awaitable[T]                # Generic async result\n-> Awaitable[str]              # Async string operations\n-> Awaitable[None]             # Async void operations\n-> Awaitable[list[T]]          # Async collections\n\n# Optional types\n-> Any | None                  # Cache operations\n-> Optional[T]                 # Nullable results\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameter-patterns",children:"Parameter Patterns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Required parameters\noperation_name: str\nfile_path: Path\njson_str: str\ndata: dict[str, Any]\n\n# Optional parameters with defaults\ntimeout: float = DEFAULT_TIMEOUT\nmax_concurrent: int = 10\nmax_retries: int = 3\ndelay: float = 1.0\nsuccess: bool = True\nerror_message: str = ""\n\n# Callable parameters\noperation: Callable[[], Awaitable[T]]\ntask: Callable[[], Awaitable[T]]\nprocessor: Callable[[str], str]\nfunc: Callable[[], T]\n\n# Collection parameters\nstrings: list[str]\npatterns: list[str]\ntasks: list[Callable[[], Awaitable[T]]]\nfile_paths: list[Path]\nrequired_keys: list[str]\nitems: list[Any]\ndicts: list[dict[str, Any]]\n\n# Keyword arguments\n**kwargs: Any\n'})}),"\n",(0,r.jsx)(n.h2,{id:"usage-pattern-examples",children:"Usage Pattern Examples"}),"\n",(0,r.jsx)(n.h3,{id:"basic-performance-monitoring",children:"Basic Performance Monitoring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'monitor = AsyncPerformanceMonitor()\n\nasync def my_operation():\n    await asyncio.sleep(1)\n    return "result"\n\nresult = await monitor.monitor_operation(\n    "my_operation",\n    my_operation,\n    timeout=5.0\n)\n\nsummary = monitor.get_performance_summary()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"async-task-management",children:"Async Task Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"task_manager = AsyncTaskManager()\n\ntasks = [\n    lambda: fetch_data(1),\n    lambda: fetch_data(2),\n    lambda: fetch_data(3)\n]\n\nresults = await task_manager.execute_parallel_tasks(\n    tasks,\n    max_concurrent=2\n)\n\n# With retry\nresult = await task_manager.execute_with_retry(\n    unreliable_task,\n    max_retries=3,\n    delay=1.0\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"string-processing",children:"String Processing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Concatenation\nstrings = ["Hello", " ", "World"]\nresult = StringProcessor.fast_string_concatenation(strings)\n\n# Formatting\ntemplate = "Hello {name}"\nformatted = StringProcessor.efficient_string_formatting(\n    template,\n    name="John"\n)\n\n# Search\ntext = "The quick brown fox"\npatterns = ["quick", "fox"]\nfound = StringProcessor.fast_string_search(text, patterns)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"file-operations",children:"File Operations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'processor = FileProcessor()\n\n# Async operations\ncontent = await processor.read_file_async(Path("file.txt"))\nawait processor.write_file_async(Path("output.txt"), "content")\n\n# Batch processing\ndef uppercase(content: str) -> str:\n    return content.upper()\n\nfiles = [Path("file1.txt"), Path("file2.txt")]\nresults = processor.process_files_batch(files, uppercase)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"json-processing",children:"JSON Processing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'json_processor = JSONProcessor()\n\n# Parse and serialize\ndata = json_processor.fast_json_parse(\'{"key": "value"}\')\njson_str = json_processor.fast_json_serialize(data)\n\n# Validate structure\nis_valid = json_processor.validate_json_structure(\n    data,\n    ["key"]\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"memory-profiling",children:"Memory Profiling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'profiler = MemoryProfiler()\n\nprofiler.take_snapshot("start")\n# ... operations ...\nprofiler.take_snapshot("end")\n\nsummary = profiler.get_memory_summary()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"performance-utilities",children:"Performance Utilities"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Measure sync function\ndef slow_function():\n    time.sleep(1)\n    return "done"\n\nresult, duration = PerformanceUtils.measure_execution_time(slow_function)\n\n# Measure async function\nasync def async_function():\n    await asyncio.sleep(1)\n    return "done"\n\nresult, duration = await PerformanceUtils.measure_async_execution_time(async_function)\n\n# Optimize collections\nitems = [1, None, 2, None, 3]\noptimized = PerformanceUtils.optimize_list_operations(items)\n\n# Merge dictionaries\ndicts = [{"a": 1}, {"b": 2}]\nmerged = PerformanceUtils.fast_dict_merge(dicts)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"caching",children:"Caching"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'cache = AgentCache()\n\n# Store and retrieve\ncache.set("key", "value")\nvalue = cache.get("key")\n\n# Get statistics\nstats = cache.get_cache_stats()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling-patterns",children:"Error Handling Patterns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# AsyncPerformanceMonitor\ntry:\n    result = await monitor.monitor_operation("op", operation, timeout=5.0)\nexcept asyncio.TimeoutError:\n    print("Operation timed out")\nexcept Exception as e:\n    print(f"Operation failed: {e}")\n\n# AsyncTaskManager\ntry:\n    result = await task_manager.execute_with_retry(task, max_retries=3)\nexcept Exception as e:\n    print(f"All retries failed: {e}")\n\n# FileProcessor\ntry:\n    content = await processor.read_file_async(path)\nexcept Exception as e:\n    print(f"File read failed: {e}")\n\n# JSONProcessor\ntry:\n    data = json_processor.fast_json_parse(json_str)\nexcept json.JSONDecodeError as e:\n    print(f"JSON parsing failed: {e}")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"integration-patterns",children:"Integration Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"with-libriscribe2-components",children:"With LibriScribe2 Components"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Agent execution with performance monitoring\nfrom libriscribe2.agents import ConceptGeneratorAgent\nfrom libriscribe2.utils.performance_improvements import AsyncPerformanceMonitor\n\nmonitor = AsyncPerformanceMonitor()\nagent = ConceptGeneratorAgent()\n\nasync def generate_concept():\n    return await agent.generate_concept(prompt="Create a story concept")\n\nresult = await monitor.monitor_operation(\n    "concept_generation",\n    generate_concept,\n    timeout=30.0\n)\n\n# File processing with caching\nfrom libriscribe2.utils.performance_improvements import AgentCache, FileProcessor\n\ncache = AgentCache()\nprocessor = FileProcessor()\n\nasync def cached_file_read(path: Path) -> str:\n    cached = cache.get(str(path))\n    if cached:\n        return cached\n\n    content = await processor.read_file_async(path)\n    cache.set(str(path), content)\n    return content\n'})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);