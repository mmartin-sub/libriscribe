"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[399],{6450:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>_,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"ai_mock_system_signatures","title":"AI Mock System - Function Signatures","description":"Complete API Reference","source":"@site/docs/ai_mock_system_signatures.md","sourceDirName":".","slug":"/ai_mock_system_signatures","permalink":"/libriscribe2/docs/ai_mock_system_signatures","draft":false,"unlisted":false,"editUrl":"https://github.com/guerra2fernando/libriscribe2/tree/main/docs/docs/ai_mock_system_signatures.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Website","permalink":"/libriscribe2/docs/"},"next":{"title":"AI Mock System Documentation","permalink":"/libriscribe2/docs/api/ai-mock-system"}}');var t=s(4848),i=s(8453);const c={},a="AI Mock System - Function Signatures",o={},l=[{value:"Complete API Reference",id:"complete-api-reference",level:2},{value:"AIMockManager Class",id:"aimockmanager-class",level:3},{value:"Constructor",id:"constructor",level:4},{value:"Public Methods",id:"public-methods",level:4},{value:"get_ai_response()",id:"get_ai_response",level:5},{value:"populate_mock_mappings_from_live()",id:"populate_mock_mappings_from_live",level:5},{value:"create_test_suite()",id:"create_test_suite",level:5},{value:"run_test_suite()",id:"run_test_suite",level:5},{value:"get_usage_stats()",id:"get_usage_stats",level:5},{value:"Private Methods",id:"private-methods",level:4},{value:"_get_mock_response()",id:"_get_mock_response",level:5},{value:"_call_real_ai()",id:"_call_real_ai",level:5},{value:"_generate_scenario_response()",id:"_generate_scenario_response",level:5},{value:"_create_success_response()",id:"_create_success_response",level:5},{value:"_create_high_quality_response()",id:"_create_high_quality_response",level:5},{value:"_create_low_quality_response()",id:"_create_low_quality_response",level:5},{value:"_create_failure_response()",id:"_create_failure_response",level:5},{value:"_create_invalid_response()",id:"_create_invalid_response",level:5},{value:"_create_partial_failure_response()",id:"_create_partial_failure_response",level:5},{value:"_create_edge_case_response()",id:"_create_edge_case_response",level:5},{value:"_record_interaction()",id:"_record_interaction",level:5},{value:"_generate_request_hash()",id:"_generate_request_hash",level:5},{value:"_load_mock_data()",id:"_load_mock_data",level:5},{value:"_save_recorded_interaction()",id:"_save_recorded_interaction",level:5},{value:"_calculate_mock_coverage()",id:"_calculate_mock_coverage",level:5},{value:"_calculate_cost()",id:"_calculate_cost",level:5},{value:"Data Classes",id:"data-classes",level:3},{value:"MockResponse",id:"mockresponse",level:4},{value:"RecordedInteraction",id:"recordedinteraction",level:4},{value:"Enums",id:"enums",level:3},{value:"MockScenario",id:"mockscenario",level:4},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Testing with Scenarios",id:"testing-with-scenarios",level:3},{value:"Recording Live Responses",id:"recording-live-responses",level:3},{value:"Comprehensive Testing",id:"comprehensive-testing",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"File System Integration",id:"file-system-integration",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"ai-mock-system---function-signatures",children:"AI Mock System - Function Signatures"})}),"\n",(0,t.jsx)(n.h2,{id:"complete-api-reference",children:"Complete API Reference"}),"\n",(0,t.jsx)(n.h3,{id:"aimockmanager-class",children:"AIMockManager Class"}),"\n",(0,t.jsx)(n.h4,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def __init__(self, mock_data_dir: Optional[str] = None) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Initialize AI Mock Manager with automatic mode detection based on environment variables."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"mock_data_dir"})," (Optional[str]): Directory for storing mock data files. Defaults to ",(0,t.jsx)(n.code,{children:".libriscribe2/mock_data"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Environment Variables Used:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"OPENAI_API_KEY"}),": If empty/unset, enables mock mode. If set, enables real AI mode."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"OPENAI_BASE_URL"}),": Optional LiteLLM proxy URL. Defaults to ",(0,t.jsx)(n.code,{children:"https://api.openai.com/v1"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"public-methods",children:"Public Methods"}),"\n",(0,t.jsx)(n.h5,{id:"get_ai_response",children:"get_ai_response()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'async def get_ai_response(\n    self,\n    prompt: str,\n    validator_id: str,\n    content_type: str,\n    model: str = "gpt-4",\n    scenario: Optional[MockScenario] = None\n) -> MockResponse\n'})}),"\n",(0,t.jsx)(n.p,{children:"Get AI response with automatic mock/real switching based on API key presence."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prompt"})," (str): The AI prompt text to send"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"validator_id"})," (str): Identifier of the validator making the request"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"content_type"}),' (str): Type of content being validated (e.g., "chapter", "manuscript")']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"model"}),' (str): OpenAI model to use. Defaults to "gpt-4"']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"scenario"})," (Optional[MockScenario]): Mock scenario to use (only applies in mock mode)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"MockResponse"}),": Standardized response structure with content, tokens, cost, etc."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Raises:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"RuntimeError"}),": If real AI mode is requested but OpenAI client not initialized"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TimeoutError"}),": If MockScenario.TIMEOUT is used"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Exception"}),": For various mock scenarios (rate limit, etc.)"]}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"populate_mock_mappings_from_live",children:"populate_mock_mappings_from_live()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'async def populate_mock_mappings_from_live(\n    self,\n    prompts: List[Dict[str, Any]],\n    model: str = "gpt-4"\n) -> Dict[str, Any]\n'})}),"\n",(0,t.jsx)(n.p,{children:"Record real AI responses for future mock playback."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prompts"})," (List[Dict[str, Any]]): List of prompt configurations, each containing:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prompt"})," (str): The actual prompt text"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"validator_id"})," (str): Validator making the request"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"content_type"})," (str): Type of content being validated"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"expected_scenario"})," (str): Expected mock scenario for this prompt"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"model"}),' (str): OpenAI model to use for live calls. Defaults to "gpt-4"']}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Dict[str, Any]"}),": Results dictionary containing:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"total_prompts"})," (int): Total number of prompts processed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"successful_recordings"})," (int): Number of successful recordings"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"failed_recordings"})," (int): Number of failed recordings"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"recordings"})," (List[Dict]): List of recording details"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"errors"})," (List[str]): List of error messages"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"create_test_suite",children:"create_test_suite()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"async def create_test_suite(self, validators: List[str]) -> Dict[str, List[MockScenario]]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create comprehensive test suite for specified validators."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"validators"})," (List[str]): List of validator IDs to create tests for"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Dict[str, List[MockScenario]]"}),": Mapping of validator IDs to list of test scenarios"]}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"run_test_suite",children:"run_test_suite()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"async def run_test_suite(self, test_suite: Dict[str, List[MockScenario]]) -> Dict[str, Any]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Execute test suite and return comprehensive results."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"test_suite"})," (Dict[str, List[MockScenario]]): Test suite from ",(0,t.jsx)(n.code,{children:"create_test_suite()"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Dict[str, Any]"}),": Test results containing:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"total_tests"})," (int): Total number of tests run"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"passed_tests"})," (int): Number of tests that passed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"failed_tests"})," (int): Number of tests that failed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"validator_results"})," (Dict): Results by validator"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"scenario_results"})," (Dict): Results by scenario"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"coverage_report"})," (Dict): Coverage metrics"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"get_usage_stats",children:"get_usage_stats()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def get_usage_stats(self) -> Dict[str, Any]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Get comprehensive usage statistics for the mock system."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Dict[str, Any]"}),": Statistics dictionary containing:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"mock_calls"})," (int): Number of mock AI calls made"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"real_calls"})," (int): Number of real AI calls made"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"scenarios_used"})," (Dict[str, int]): Count of each scenario used"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"validators_tested"})," (List[str]): List of validators tested"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"recorded_interactions"})," (int): Number of recorded interactions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"mock_coverage"})," (Dict[str, Any]): Coverage metrics"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"private-methods",children:"Private Methods"}),"\n",(0,t.jsx)(n.h5,{id:"_get_mock_response",children:"_get_mock_response()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"async def _get_mock_response(\n    self,\n    prompt: str,\n    validator_id: str,\n    content_type: str,\n    scenario: Optional[MockScenario] = None\n) -> MockResponse\n"})}),"\n",(0,t.jsx)(n.p,{children:"Internal method to generate mock AI responses."}),"\n",(0,t.jsx)(n.h5,{id:"_call_real_ai",children:"_call_real_ai()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"async def _call_real_ai(\n    self,\n    prompt: str,\n    validator_id: str,\n    content_type: str,\n    model: str\n) -> MockResponse\n"})}),"\n",(0,t.jsx)(n.p,{children:"Internal method to call real AI through OpenAI SDK."}),"\n",(0,t.jsx)(n.h5,{id:"_generate_scenario_response",children:"_generate_scenario_response()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"async def _generate_scenario_response(\n    self,\n    prompt: str,\n    validator_id: str,\n    content_type: str,\n    scenario: MockScenario\n) -> MockResponse\n"})}),"\n",(0,t.jsx)(n.p,{children:"Generate mock response based on specific scenario."}),"\n",(0,t.jsx)(n.h5,{id:"_create_success_response",children:"_create_success_response()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def _create_success_response(\n    self,\n    prompt: str,\n    validator_id: str,\n    content_type: str\n) -> MockResponse\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create a successful mock response with validator-specific content."}),"\n",(0,t.jsx)(n.h5,{id:"_create_high_quality_response",children:"_create_high_quality_response()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def _create_high_quality_response(\n    self,\n    prompt: str,\n    validator_id: str,\n    content_type: str\n) -> MockResponse\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create a high-quality mock response (scores > 90%)."}),"\n",(0,t.jsx)(n.h5,{id:"_create_low_quality_response",children:"_create_low_quality_response()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def _create_low_quality_response(\n    self,\n    prompt: str,\n    validator_id: str,\n    content_type: str\n) -> MockResponse\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create a low-quality mock response (scores < 70%)."}),"\n",(0,t.jsx)(n.h5,{id:"_create_failure_response",children:"_create_failure_response()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def _create_failure_response(\n    self,\n    prompt: str,\n    validator_id: str,\n    content_type: str\n) -> MockResponse\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create a failure mock response."}),"\n",(0,t.jsx)(n.h5,{id:"_create_invalid_response",children:"_create_invalid_response()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def _create_invalid_response(\n    self,\n    prompt: str,\n    validator_id: str,\n    content_type: str\n) -> MockResponse\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create an invalid/malformed mock response for testing error handling."}),"\n",(0,t.jsx)(n.h5,{id:"_create_partial_failure_response",children:"_create_partial_failure_response()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def _create_partial_failure_response(\n    self,\n    prompt: str,\n    validator_id: str,\n    content_type: str\n) -> MockResponse\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create a partial failure mock response."}),"\n",(0,t.jsx)(n.h5,{id:"_create_edge_case_response",children:"_create_edge_case_response()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def _create_edge_case_response(\n    self,\n    prompt: str,\n    validator_id: str,\n    content_type: str\n) -> MockResponse\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create an edge case mock response."}),"\n",(0,t.jsx)(n.h5,{id:"_record_interaction",children:"_record_interaction()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"async def _record_interaction(\n    self,\n    prompt: str,\n    response: MockResponse,\n    validator_id: str,\n    content_type: str\n) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Record AI interaction for future playback."}),"\n",(0,t.jsx)(n.h5,{id:"_generate_request_hash",children:"_generate_request_hash()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def _generate_request_hash(\n    self,\n    prompt: str,\n    validator_id: str,\n    content_type: str\n) -> str\n"})}),"\n",(0,t.jsx)(n.p,{children:"Generate consistent hash for request caching."}),"\n",(0,t.jsx)(n.h5,{id:"_load_mock_data",children:"_load_mock_data()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def _load_mock_data(self) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Load existing mock data from disk."}),"\n",(0,t.jsx)(n.h5,{id:"_save_recorded_interaction",children:"_save_recorded_interaction()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"async def _save_recorded_interaction(self, interaction: RecordedInteraction) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Save recorded interaction to disk."}),"\n",(0,t.jsx)(n.h5,{id:"_calculate_mock_coverage",children:"_calculate_mock_coverage()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def _calculate_mock_coverage(self) -> Dict[str, Any]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Calculate test coverage metrics."}),"\n",(0,t.jsx)(n.h5,{id:"_calculate_cost",children:"_calculate_cost()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def _calculate_cost(self, model: str, tokens_used: int) -> float\n"})}),"\n",(0,t.jsx)(n.p,{children:"Calculate approximate cost based on model and token usage."}),"\n",(0,t.jsx)(n.h3,{id:"data-classes",children:"Data Classes"}),"\n",(0,t.jsx)(n.h4,{id:"mockresponse",children:"MockResponse"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@dataclass\nclass MockResponse:\n    content: str                     # AI response content (JSON string)\n    model: str                       # Model used (e.g., "gpt-4")\n    tokens_used: int                 # Token consumption\n    cost: float                      # API cost in USD\n    confidence: float = 1.0          # Response confidence (0.0-1.0)\n    metadata: Dict[str, Any] = field(default_factory=dict)  # Additional metadata\n    timestamp: datetime = field(default_factory=datetime.now)  # Response timestamp\n    scenario: MockScenario = MockScenario.SUCCESS  # Mock scenario used\n'})}),"\n",(0,t.jsx)(n.h4,{id:"recordedinteraction",children:"RecordedInteraction"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@dataclass\nclass RecordedInteraction:\n    interaction_id: str              # Unique interaction identifier\n    request_hash: str                # Hash of prompt + context for caching\n    prompt: str                      # Original prompt text\n    response: MockResponse           # AI response\n    validator_id: str                # Validator that made the request\n    content_type: str                # Type of content validated\n    timestamp: datetime              # Recording timestamp\n    real_ai_used: bool = True        # Whether real AI was used\n"})}),"\n",(0,t.jsx)(n.h3,{id:"enums",children:"Enums"}),"\n",(0,t.jsx)(n.h4,{id:"mockscenario",children:"MockScenario"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class MockScenario(Enum):\n    SUCCESS = "success"              # Normal successful validation\n    FAILURE = "failure"              # Complete validation failure\n    TIMEOUT = "timeout"              # AI timeout simulation\n    RATE_LIMIT = "rate_limit"        # Rate limiting simulation\n    INVALID_RESPONSE = "invalid_response"  # Malformed JSON response\n    PARTIAL_FAILURE = "partial_failure"    # Some checks pass, some fail\n    HIGH_QUALITY = "high_quality"    # High quality content (>90% score)\n    LOW_QUALITY = "low_quality"      # Low quality content (<70% score)\n    EDGE_CASE = "edge_case"          # Edge cases (empty content, etc.)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Initialize manager (auto-detects mode from environment)\nmock_manager = AIMockManager()\n\n# Get AI response (works in both mock and real modes)\nresponse = await mock_manager.get_ai_response(\n    prompt="Validate this content",\n    validator_id="content_validator",\n    content_type="chapter",\n    model="gpt-4"\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing-with-scenarios",children:"Testing with Scenarios"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Test specific scenario\nresponse = await mock_manager.get_ai_response(\n    prompt="Test content",\n    validator_id="content_validator",\n    content_type="chapter",\n    scenario=MockScenario.LOW_QUALITY\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"recording-live-responses",children:"Recording Live Responses"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Set environment variable for real AI mode\nos.environ["OPENAI_API_KEY"] = "your-key"\n\n# Record responses for later mock use\nprompts = [\n    {\n        "prompt": "Validate chapter content",\n        "validator_id": "content_validator",\n        "content_type": "chapter",\n        "expected_scenario": "success"\n    }\n]\n\nresults = await mock_manager.populate_mock_mappings_from_live(prompts)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"comprehensive-testing",children:"Comprehensive Testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Create and run test suite\nvalidators = ["content_validator", "quality_validator"]\ntest_suite = await mock_manager.create_test_suite(validators)\nresults = await mock_manager.run_test_suite(test_suite)\n\n# Check coverage\nstats = mock_manager.get_usage_stats()\nprint(f"Coverage: {stats[\'mock_coverage\'][\'coverage_percentage\']:.1f}%")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.p,{children:"The system handles various error conditions gracefully:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Missing API Key"}),": Automatically switches to mock mode"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"OpenAI SDK Unavailable"}),": Falls back to mock mode with warning"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network Errors"}),": Returns error response in standard format"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Invalid JSON"}),": Handles malformed responses for testing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Timeout Scenarios"}),": Simulates AI timeouts for testing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rate Limiting"}),": Simulates API rate limits for testing"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"file-system-integration",children:"File System Integration"}),"\n",(0,t.jsx)(n.p,{children:"The system automatically manages files in the mock data directory:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"recorded_interactions.json"}),": Stores recorded real AI interactions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"mock_responses.json"}),": Stores custom mock responses"]}),"\n",(0,t.jsx)(n.li,{children:"Automatic cleanup and persistence of interaction data"}),"\n",(0,t.jsx)(n.li,{children:"Thread-safe file operations for concurrent access"}),"\n"]})]})}function _(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var r=s(6540);const t={},i=r.createContext(t);function c(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);