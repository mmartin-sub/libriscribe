"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[685],{712:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"validation_interfaces_signatures","title":"LibriScribe Validation Interfaces - Function and Class Signatures","description":"Overview","source":"@site/docs/validation_interfaces_signatures.md","sourceDirName":".","slug":"/validation_interfaces_signatures","permalink":"/libriscribe2/docs/validation_interfaces_signatures","draft":false,"unlisted":false,"editUrl":"https://github.com/guerra2fernando/libriscribe2/tree/main/docs/docs/validation_interfaces_signatures.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ValidationEngine API Documentation","permalink":"/libriscribe2/docs/validation_engine_api"},"next":{"title":"LibriScribe Validation Utils - Function and Class Signatures","permalink":"/libriscribe2/docs/validation_utils_signatures"}}');var i=t(4848),r=t(8453);const s={},l="LibriScribe Validation Interfaces - Function and Class Signatures",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Enums",id:"enums",level:2},{value:"ValidationStatus",id:"validationstatus",level:3},{value:"FindingType",id:"findingtype",level:3},{value:"Severity",id:"severity",level:3},{value:"Data Classes",id:"data-classes",level:2},{value:"ContentLocation",id:"contentlocation",level:3},{value:"Finding",id:"finding",level:3},{value:"ValidatorResult",id:"validatorresult",level:3},{value:"ValidationResult",id:"validationresult",level:3},{value:"ValidationConfig",id:"validationconfig",level:3},{value:"ValidatorBase Class",id:"validatorbase-class",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Abstract Methods",id:"abstract-methods",level:3},{value:"Lifecycle Hooks",id:"lifecycle-hooks",level:3},{value:"Core Methods",id:"core-methods",level:3},{value:"Abstract Interfaces",id:"abstract-interfaces",level:2},{value:"ValidationEngine",id:"validationengine",level:3},{value:"ValidationInterface",id:"validationinterface",level:3},{value:"ResourceManager",id:"resourcemanager",level:3},{value:"HealthMonitor",id:"healthmonitor",level:3},{value:"AIUsageTracker",id:"aiusagetracker",level:3},{value:"ReportGenerator",id:"reportgenerator",level:3},{value:"Exception Classes",id:"exception-classes",level:2},{value:"ValidationError",id:"validationerror",level:3},{value:"ValidatorNotFoundError",id:"validatornotfounderror",level:3},{value:"ConfigurationError",id:"configurationerror",level:3},{value:"ResourceError",id:"resourceerror",level:3},{value:"Type Annotations Summary",id:"type-annotations-summary",level:2},{value:"Common Type Patterns",id:"common-type-patterns",level:3},{value:"Function Return Types",id:"function-return-types",level:3},{value:"Parameter Patterns",id:"parameter-patterns",level:3},{value:"Import Requirements",id:"import-requirements",level:2},{value:"Usage Pattern Examples",id:"usage-pattern-examples",level:2},{value:"Basic Validator Implementation",id:"basic-validator-implementation",level:3},{value:"Finding Creation Pattern",id:"finding-creation-pattern",level:3},{value:"Configuration Pattern",id:"configuration-pattern",level:3},{value:"Lifecycle Usage Pattern",id:"lifecycle-usage-pattern",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"libriscribe-validation-interfaces---function-and-class-signatures",children:"LibriScribe Validation Interfaces - Function and Class Signatures"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["This document provides a comprehensive reference of all function and class signatures in the ",(0,i.jsx)(n.code,{children:"src/libriscribe2/validation/interfaces.py"})," module."]}),"\n",(0,i.jsx)(n.h2,{id:"enums",children:"Enums"}),"\n",(0,i.jsx)(n.h3,{id:"validationstatus",children:"ValidationStatus"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class ValidationStatus(Enum):\n    NOT_STARTED = "not_started"\n    IN_PROGRESS = "in_progress"\n    COMPLETED = "completed"\n    FAILED = "failed"\n    NEEDS_HUMAN_REVIEW = "needs_human_review"\n    ERROR = "error"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"findingtype",children:"FindingType"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class FindingType(Enum):\n    CONTENT_QUALITY = "content_quality"\n    TONE_CONSISTENCY = "tone_consistency"\n    OUTLINE_ADHERENCE = "outline_adherence"\n    SECURITY_VULNERABILITY = "security_vulnerability"\n    CODE_QUALITY = "code_quality"\n    DOCUMENTATION = "documentation"\n    COMPLIANCE = "compliance"\n    PUBLISHING_STANDARD = "publishing_standard"\n    AI_OUTPUT_QUALITY = "ai_output_quality"\n    SYSTEM_ERROR = "system_error"\n    LANGUAGE_UNICODE = "language_unicode"\n    CHARACTER_COMPATIBILITY = "character_compatibility"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"severity",children:"Severity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Severity(Enum):\n    INFO = "info"\n    LOW = "low"\n    MEDIUM = "medium"\n    HIGH = "high"\n    CRITICAL = "critical"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"data-classes",children:"Data Classes"}),"\n",(0,i.jsx)(n.h3,{id:"contentlocation",children:"ContentLocation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"@dataclass\nclass ContentLocation:\n    content_type: str\n    content_id: str\n    line_number: Optional[int] = None\n    column_number: Optional[int] = None\n    character_range: Optional[Tuple[int, int]] = None\n"})}),"\n",(0,i.jsx)(n.h3,{id:"finding",children:"Finding"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@dataclass\nclass Finding:\n    finding_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    validator_id: str = ""\n    type: FindingType = FindingType.CONTENT_QUALITY\n    severity: Severity = Severity.MEDIUM\n    title: str = ""\n    message: str = ""\n    location: Optional[ContentLocation] = None\n    remediation: Optional[str] = None\n    confidence: float = 1.0\n    metadata: Dict[str, Any] = field(default_factory=dict)\n    timestamp: datetime = field(default_factory=datetime.now)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"validatorresult",children:"ValidatorResult"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"@dataclass\nclass ValidatorResult:\n    validator_id: str\n    status: ValidationStatus\n    findings: List[Finding] = field(default_factory=list)\n    metrics: Dict[str, Any] = field(default_factory=dict)\n    execution_time: float = 0.0\n    ai_usage: Dict[str, Any] = field(default_factory=dict)\n    metadata: Dict[str, Any] = field(default_factory=dict)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"validationresult",children:"ValidationResult"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@dataclass\nclass ValidationResult:\n    validation_id: str = field(default_factory=lambda: str(uuid.uuid4()))\n    project_id: str = ""\n    status: ValidationStatus = ValidationStatus.NOT_STARTED\n    overall_quality_score: float = 0.0\n    human_review_required: bool = False\n    validator_results: Dict[str, ValidatorResult] = field(default_factory=dict)\n    summary: Dict[str, Any] = field(default_factory=dict)\n    total_execution_time: float = 0.0\n    total_ai_usage: Dict[str, Any] = field(default_factory=dict)\n    timestamp: datetime = field(default_factory=datetime.now)\n    metadata: Dict[str, Any] = field(default_factory=dict)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"validationconfig",children:"ValidationConfig"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@dataclass\nclass ValidationConfig:\n    # Core settings\n    project_id: str = ""\n    validation_rules: Dict[str, Any] = field(default_factory=dict)\n    quality_thresholds: Dict[str, float] = field(default_factory=dict)\n    human_review_threshold: float = 70.0\n\n    # Validator settings\n    enabled_validators: List[str] = field(default_factory=list)\n    validator_configs: Dict[str, Dict[str, Any]] = field(default_factory=dict)\n\n    # AI settings\n    ai_mock_enabled: bool = False\n    ai_usage_tracking: bool = True\n    litellm_config: Dict[str, Any] = field(default_factory=dict)\n\n    # Processing settings\n    parallel_processing: bool = True\n    max_parallel_requests: int = 100\n    request_timeout: int = 1200\n    chunk_size_tokens: int = 50000\n\n    # Output settings\n    output_formats: List[str] = field(default_factory=lambda: ["json", "html"])\n    report_template: Optional[str] = None\n\n    # Workflow integration\n    auto_validate_chapters: bool = True\n    auto_validate_manuscript: bool = True\n    fail_fast: bool = True\n\n    # Resource management\n    temp_directory: Optional[str] = None\n    cleanup_on_completion: bool = True\n\n    # Monitoring\n    health_check_enabled: bool = True\n    metrics_collection: bool = True\n'})}),"\n",(0,i.jsx)(n.h2,{id:"validatorbase-class",children:"ValidatorBase Class"}),"\n",(0,i.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def __init__(self, validator_id: str, name: str, version: str) -> None\n"})}),"\n",(0,i.jsx)(n.h3,{id:"abstract-methods",children:"Abstract Methods"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"@abstractmethod\nasync def initialize(self, config: Dict[str, Any]) -> None\n\n@abstractmethod\nasync def validate(self, content: Any, context: Dict[str, Any]) -> ValidatorResult\n\n@abstractmethod\ndef get_supported_content_types(self) -> List[str]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"lifecycle-hooks",children:"Lifecycle Hooks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"async def pre_validation_hook(self, content: Any, context: Dict[str, Any]) -> Dict[str, Any]\n\nasync def post_validation_hook(self, result: ValidatorResult, content: Any, context: Dict[str, Any]) -> ValidatorResult\n\nasync def on_validation_error(self, error: Exception, content: Any, context: Dict[str, Any]) -> Optional[ValidatorResult]\n\nasync def on_configuration_change(self, old_config: Dict[str, Any], new_config: Dict[str, Any]) -> None\n"})}),"\n",(0,i.jsx)(n.h3,{id:"core-methods",children:"Core Methods"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'async def validate_with_lifecycle(self, content: Any, context: Dict[str, Any]) -> ValidatorResult\n\ndef configure_validation_rules(self, rules: Dict[str, Any]) -> None\n\ndef configure_quality_thresholds(self, thresholds: Dict[str, float]) -> None\n\ndef get_validation_rule(self, rule_name: str, default: Any = None) -> Any\n\ndef get_quality_threshold(self, threshold_name: str, default: float = 70.0) -> float\n\ndef should_flag_for_human_review(self, quality_score: float, threshold_name: str = "human_review") -> bool\n\ndef create_finding(self,\n                  finding_type: FindingType,\n                  severity: Severity,\n                  title: str,\n                  message: str,\n                  location: Optional[ContentLocation] = None,\n                  remediation: Optional[str] = None,\n                  confidence: float = 1.0,\n                  metadata: Optional[Dict[str, Any]] = None) -> Finding\n\ndef get_validator_info(self) -> Dict[str, Any]\n\ndef get_execution_context(self) -> Dict[str, Any]\n\nasync def cleanup(self) -> None\n'})}),"\n",(0,i.jsx)(n.h2,{id:"abstract-interfaces",children:"Abstract Interfaces"}),"\n",(0,i.jsx)(n.h3,{id:"validationengine",children:"ValidationEngine"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class ValidationEngine(ABC):\n    @abstractmethod\n    async def initialize(self, config: ValidationConfig) -> None\n\n    @abstractmethod\n    async def register_validator(self, validator: ValidatorBase) -> None\n\n    @abstractmethod\n    async def validate_project(self, project_data: Any, project_id: str) -> ValidationResult\n\n    @abstractmethod\n    async def validate_chapter(self, chapter_data: Any, project_context: Dict[str, Any]) -> ValidationResult\n\n    @abstractmethod\n    async def get_validation_status(self, validation_id: str) -> Optional[ValidationResult]\n\n    @abstractmethod\n    async def get_registered_validators(self) -> List[Dict[str, str]]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"validationinterface",children:"ValidationInterface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class ValidationInterface(ABC):\n    @abstractmethod\n    async def validate_project(self, knowledge_base_path: str, project_id: Optional[str] = None) -> ValidationResult\n\n    @abstractmethod\n    async def validate_chapter(self, chapter_path: str, project_context: str, project_id: str) -> ValidationResult\n\n    @abstractmethod\n    async def get_system_health(self) -> Dict[str, Any]\n\n    @abstractmethod\n    async def get_validation_history(self, project_id: str) -> List[ValidationResult]\n\n    @abstractmethod\n    async def configure_validation_rules(self, project_id: str, rules: Dict[str, Any]) -> bool\n"})}),"\n",(0,i.jsx)(n.h3,{id:"resourcemanager",children:"ResourceManager"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class ResourceManager(ABC):\n    @abstractmethod\n    async def create_workspace(self, project_id: str) -> str\n\n    @abstractmethod\n    async def cleanup_workspace(self, workspace_path: str) -> None\n\n    @abstractmethod\n    async def get_unique_temp_file(self, workspace: str, suffix: str = "") -> str\n'})}),"\n",(0,i.jsx)(n.h3,{id:"healthmonitor",children:"HealthMonitor"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class HealthMonitor(ABC):\n    @abstractmethod\n    async def get_health_status(self) -> Dict[str, Any]\n\n    @abstractmethod\n    async def get_metrics(self) -> Dict[str, Any]\n\n    @abstractmethod\n    async def check_ai_connectivity(self) -> bool\n"})}),"\n",(0,i.jsx)(n.h3,{id:"aiusagetracker",children:"AIUsageTracker"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class AIUsageTracker(ABC):\n    @abstractmethod\n    async def track_request(self, project_id: str, validator_id: str, tokens_used: int, cost: float, model: str) -> None\n\n    @abstractmethod\n    async def get_project_usage(self, project_id: str) -> Dict[str, Any]\n\n    @abstractmethod\n    async def get_usage_report(self, project_id: str) -> Dict[str, Any]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"reportgenerator",children:"ReportGenerator"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class ReportGenerator(ABC):\n    @abstractmethod\n    async def generate_report(self, result: ValidationResult, format: str) -> Dict[str, Any]\n\n    @abstractmethod\n    async def get_supported_formats(self) -> List[str]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"exception-classes",children:"Exception Classes"}),"\n",(0,i.jsx)(n.h3,{id:"validationerror",children:"ValidationError"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class ValidationError(Exception):\n    pass\n"})}),"\n",(0,i.jsx)(n.h3,{id:"validatornotfounderror",children:"ValidatorNotFoundError"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class ValidatorNotFoundError(ValidationError):\n    pass\n"})}),"\n",(0,i.jsx)(n.h3,{id:"configurationerror",children:"ConfigurationError"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class ConfigurationError(ValidationError):\n    pass\n"})}),"\n",(0,i.jsx)(n.h3,{id:"resourceerror",children:"ResourceError"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class ResourceError(ValidationError):\n    pass\n"})}),"\n",(0,i.jsx)(n.h2,{id:"type-annotations-summary",children:"Type Annotations Summary"}),"\n",(0,i.jsx)(n.h3,{id:"common-type-patterns",children:"Common Type Patterns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Content types\ncontent: Any\ncontext: Dict[str, Any]\nconfig: Dict[str, Any]\n\n# Result types\nValidatorResult\nValidationResult\nOptional[ValidationResult]\n\n# Collection types\nList[Finding]\nList[str]\nDict[str, ValidatorResult]\nDict[str, Any]\n\n# Identifier types\nvalidator_id: str\nproject_id: str\nvalidation_id: str\n\n# Numeric types\nquality_score: float\nexecution_time: float\nconfidence: float\n\n# Optional types\nOptional[ContentLocation]\nOptional[str]\nOptional[Dict[str, Any]]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"function-return-types",children:"Function Return Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Async methods\n-> None                           # Initialization, configuration\n-> ValidatorResult               # Validation operations\n-> ValidationResult              # Complete validation\n-> Dict[str, Any]               # Information retrieval\n-> List[str]                    # Content types, formats\n-> bool                         # Status checks\n-> Optional[ValidatorResult]    # Error recovery\n\n# Sync methods\n-> None                         # Configuration updates\n-> Any                          # Rule retrieval\n-> float                        # Threshold retrieval\n-> bool                         # Review checks\n-> Finding                      # Finding creation\n-> Dict[str, Any]              # Information retrieval\n"})}),"\n",(0,i.jsx)(n.h3,{id:"parameter-patterns",children:"Parameter Patterns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Required parameters\nvalidator_id: str\nname: str\nversion: str\ncontent: Any\ncontext: Dict[str, Any]\n\n# Optional parameters with defaults\ndefault: Any = None\nthreshold_name: str = "human_review"\nconfidence: float = 1.0\nsuffix: str = ""\n\n# Optional parameters\nlocation: Optional[ContentLocation] = None\nremediation: Optional[str] = None\nmetadata: Optional[Dict[str, Any]] = None\n'})}),"\n",(0,i.jsx)(n.h2,{id:"import-requirements",children:"Import Requirements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from abc import ABC, abstractmethod\nfrom typing import Dict, List, Optional, Any, Union, Tuple\nfrom dataclasses import dataclass, field\nfrom enum import Enum\nfrom datetime import datetime\nimport uuid\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage-pattern-examples",children:"Usage Pattern Examples"}),"\n",(0,i.jsx)(n.h3,{id:"basic-validator-implementation",children:"Basic Validator Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class MyValidator(ValidatorBase):\n    def __init__(self):\n        super().__init__("my_validator", "My Validator", "1.0.0")\n\n    async def initialize(self, config: Dict[str, Any]) -> None:\n        # Implementation\n        pass\n\n    async def validate(self, content: Any, context: Dict[str, Any]) -> ValidatorResult:\n        # Implementation\n        return ValidatorResult(...)\n\n    def get_supported_content_types(self) -> List[str]:\n        return ["chapter", "manuscript"]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"finding-creation-pattern",children:"Finding Creation Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'finding = validator.create_finding(\n    finding_type=FindingType.CONTENT_QUALITY,\n    severity=Severity.MEDIUM,\n    title="Issue Title",\n    message="Detailed message",\n    remediation="How to fix",\n    confidence=0.8\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"configuration-pattern",children:"Configuration Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'validator.configure_validation_rules({\n    "rule_name": "rule_value"\n})\n\nvalidator.configure_quality_thresholds({\n    "threshold_name": 75.0\n})\n\nrule_value = validator.get_validation_rule("rule_name", default_value)\nthreshold = validator.get_quality_threshold("threshold_name", 70.0)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"lifecycle-usage-pattern",children:"Lifecycle Usage Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"result = await validator.validate_with_lifecycle(content, context)\n\n# Or implement hooks\nasync def pre_validation_hook(self, content, context):\n    # Preprocessing\n    return modified_context\n\nasync def post_validation_hook(self, result, content, context):\n    # Postprocessing\n    return modified_result\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var a=t(6540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);