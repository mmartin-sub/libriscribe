"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import List, Sequence
from autogen_core import Component, ComponentBase, ComponentModel
from pydantic import BaseModel
from ..messages import BaseAgentEvent, BaseChatMessage, StopMessage

class TerminatedException(BaseException):
    ...


class TerminationCondition(ABC, ComponentBase[BaseModel]):
    """A stateful condition that determines when a conversation should be terminated.

    A termination condition is a callable that takes a sequence of BaseChatMessage objects
    since the last time the condition was called, and returns a StopMessage if the
    conversation should be terminated, or None otherwise.
    Once a termination condition has been reached, it must be reset before it can be used again.

    Termination conditions can be combined using the AND and OR operators.

    Example:

        .. code-block:: python

            import asyncio
            from autogen_agentchat.conditions import MaxMessageTermination, TextMentionTermination


            async def main() -> None:
                # Terminate the conversation after 10 turns or if the text "TERMINATE" is mentioned.
                cond1 = MaxMessageTermination(10) | TextMentionTermination("TERMINATE")

                # Terminate the conversation after 10 turns and if the text "TERMINATE" is mentioned.
                cond2 = MaxMessageTermination(10) & TextMentionTermination("TERMINATE")

                # ...

                # Reset the termination condition.
                await cond1.reset()
                await cond2.reset()


            asyncio.run(main())
    """
    component_type = ...
    @property
    @abstractmethod
    def terminated(self) -> bool:
        """Check if the termination condition has been reached"""
        ...
    
    @abstractmethod
    async def __call__(self, messages: Sequence[BaseAgentEvent | BaseChatMessage]) -> StopMessage | None:
        """Check if the conversation should be terminated based on the messages received
        since the last time the condition was called.
        Return a StopMessage if the conversation should be terminated, or None otherwise.

        Args:
            messages: The messages received since the last time the condition was called.

        Returns:
            StopMessage | None: A StopMessage if the conversation should be terminated, or None otherwise.

        Raises:
            TerminatedException: If the termination condition has already been reached."""
        ...
    
    @abstractmethod
    async def reset(self) -> None:
        """Reset the termination condition."""
        ...
    
    def __and__(self, other: TerminationCondition) -> TerminationCondition:
        """Combine two termination conditions with an AND operation."""
        ...
    
    def __or__(self, other: TerminationCondition) -> TerminationCondition:
        """Combine two termination conditions with an OR operation."""
        ...
    


class AndTerminationConditionConfig(BaseModel):
    conditions: List[ComponentModel]
    ...


class AndTerminationCondition(TerminationCondition, Component[AndTerminationConditionConfig]):
    component_config_schema = ...
    component_type = ...
    component_provider_override = ...
    def __init__(self, *conditions: TerminationCondition) -> None:
        ...
    
    @property
    def terminated(self) -> bool:
        ...
    
    async def __call__(self, messages: Sequence[BaseAgentEvent | BaseChatMessage]) -> StopMessage | None:
        ...
    
    async def reset(self) -> None:
        ...
    


class OrTerminationConditionConfig(BaseModel):
    conditions: List[ComponentModel]
    ...


class OrTerminationCondition(TerminationCondition, Component[OrTerminationConditionConfig]):
    component_config_schema = ...
    component_type = ...
    component_provider_override = ...
    def __init__(self, *conditions: TerminationCondition) -> None:
        ...
    
    @property
    def terminated(self) -> bool:
        ...
    
    async def __call__(self, messages: Sequence[BaseAgentEvent | BaseChatMessage]) -> StopMessage | None:
        ...
    
    async def reset(self) -> None:
        ...
    
