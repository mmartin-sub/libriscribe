"""
This type stub file was generated by pyright.
"""

from typing import Any, Mapping
from autogen_core import MessageContext, event, rpc
from autogen_agentchat.messages import MessageFactory
from ...base import ChatAgent, Team
from ._events import GroupChatAgentResponse, GroupChatPause, GroupChatRequestPublish, GroupChatReset, GroupChatResume, GroupChatStart, GroupChatTeamResponse
from ._sequential_routed_agent import SequentialRoutedAgent

class ChatAgentContainer(SequentialRoutedAgent):
    """A core agent class that delegates message handling to an
    :class:`autogen_agentchat.base.ChatAgent` or :class:`autogen_agentchat.base.Team`
    so that it can be used in a group chat team.

    Args:
        parent_topic_type (str): The topic type of the parent orchestrator.
        output_topic_type (str): The topic type for the output.
        agent (ChatAgent | Team): The agent or team to delegate message handling to.
        message_factory (MessageFactory): The message factory to use for
            creating messages from JSON data.
    """
    def __init__(self, parent_topic_type: str, output_topic_type: str, agent: ChatAgent | Team, message_factory: MessageFactory) -> None:
        ...
    
    @event
    async def handle_start(self, message: GroupChatStart, ctx: MessageContext) -> None:
        """Handle a start event by appending the content to the buffer."""
        ...
    
    @event
    async def handle_agent_response(self, message: GroupChatAgentResponse, ctx: MessageContext) -> None:
        """Handle an agent response event by appending the content to the buffer."""
        ...
    
    @event
    async def handle_team_response(self, message: GroupChatTeamResponse, ctx: MessageContext) -> None:
        """Handle a team response event by appending the content to the buffer."""
        ...
    
    @rpc
    async def handle_reset(self, message: GroupChatReset, ctx: MessageContext) -> None:
        """Handle a reset event by resetting the agent."""
        ...
    
    @event
    async def handle_request(self, message: GroupChatRequestPublish, ctx: MessageContext) -> None:
        """Handle a content request event by passing the messages in the buffer
        to the delegate agent and publish the response."""
        ...
    
    @rpc
    async def handle_pause(self, message: GroupChatPause, ctx: MessageContext) -> None:
        """Handle a pause event by pausing the agent."""
        ...
    
    @rpc
    async def handle_resume(self, message: GroupChatResume, ctx: MessageContext) -> None:
        """Handle a resume event by resuming the agent."""
        ...
    
    async def on_unhandled_message(self, message: Any, ctx: MessageContext) -> None:
        ...
    
    async def save_state(self) -> Mapping[str, Any]:
        ...
    
    async def load_state(self, state: Mapping[str, Any]) -> None:
        ...
    
