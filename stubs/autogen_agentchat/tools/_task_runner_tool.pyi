"""
This type stub file was generated by pyright.
"""

from abc import ABC
from typing import Annotated, Any, AsyncGenerator, Mapping
from autogen_core import CancellationToken
from autogen_core.tools import BaseStreamTool
from pydantic import BaseModel
from ..agents import BaseChatAgent
from ..base import TaskResult
from ..messages import BaseAgentEvent, BaseChatMessage
from ..teams import BaseGroupChat

class TaskRunnerToolArgs(BaseModel):
    """Input for the TaskRunnerTool."""
    task: Annotated[str, "The task to be executed."]
    ...


class TaskRunnerTool(BaseStreamTool[TaskRunnerToolArgs, BaseAgentEvent | BaseChatMessage, TaskResult], ABC):
    """An base class for tool that can be used to run a task using a team or an agent."""
    component_type = ...
    def __init__(self, task_runner: BaseGroupChat | BaseChatAgent, name: str, description: str, return_value_as_last_message: bool) -> None:
        ...
    
    async def run(self, args: TaskRunnerToolArgs, cancellation_token: CancellationToken) -> TaskResult:
        """Run the task and return the result."""
        ...
    
    async def run_stream(self, args: TaskRunnerToolArgs, cancellation_token: CancellationToken) -> AsyncGenerator[BaseAgentEvent | BaseChatMessage | TaskResult, None]:
        """Run the task and yield events or messages as they are produced, the final :class:`TaskResult`
        will be yielded at the end."""
        ...
    
    def return_value_as_string(self, value: TaskResult) -> str:
        """Convert the task result to a string."""
        ...
    
    async def save_state_json(self) -> Mapping[str, Any]:
        ...
    
    async def load_state_json(self, state: Mapping[str, Any]) -> None:
        ...
    
