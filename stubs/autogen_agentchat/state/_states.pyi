"""
This type stub file was generated by pyright.
"""

from typing import Any, List, Mapping, Optional
from pydantic import BaseModel

class BaseState(BaseModel):
    """Base class for all saveable state"""
    type: str = ...
    version: str = ...


class AssistantAgentState(BaseState):
    """State for an assistant agent."""
    llm_context: Mapping[str, Any] = ...
    type: str = ...


class TeamState(BaseState):
    """State for a team of agents."""
    agent_states: Mapping[str, Any] = ...
    type: str = ...


class BaseGroupChatManagerState(BaseState):
    """Base state for all group chat managers."""
    message_thread: List[Mapping[str, Any]] = ...
    current_turn: int = ...
    type: str = ...


class ChatAgentContainerState(BaseState):
    """State for a container of chat agents."""
    agent_state: Mapping[str, Any] = ...
    message_buffer: List[Mapping[str, Any]] = ...
    type: str = ...


class RoundRobinManagerState(BaseGroupChatManagerState):
    """State for :class:`~autogen_agentchat.teams.RoundRobinGroupChat` manager."""
    next_speaker_index: int = ...
    type: str = ...


class SelectorManagerState(BaseGroupChatManagerState):
    """State for :class:`~autogen_agentchat.teams.SelectorGroupChat` manager."""
    previous_speaker: Optional[str] = ...
    type: str = ...


class SwarmManagerState(BaseGroupChatManagerState):
    """State for :class:`~autogen_agentchat.teams.Swarm` manager."""
    current_speaker: str = ...
    type: str = ...


class MagenticOneOrchestratorState(BaseGroupChatManagerState):
    """State for :class:`~autogen_agentchat.teams.MagneticOneGroupChat` orchestrator."""
    task: str = ...
    facts: str = ...
    plan: str = ...
    n_rounds: int = ...
    n_stalls: int = ...
    type: str = ...


class SocietyOfMindAgentState(BaseState):
    """State for a Society of Mind agent."""
    inner_team_state: Mapping[str, Any] = ...
    type: str = ...
