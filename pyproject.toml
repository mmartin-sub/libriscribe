[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "libriscribe"
version = "0.3.0"
description = "Your AI-Powered Book Writing Assistant"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "LibriScribe Team"},
]
license = {file = "LICENSE"}
keywords = ["ai", "book", "writing", "assistant", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",

    "Programming Language :: Python :: 3.12",
    "Topic :: Text Processing",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "typer",
    "openai",
    "python-dotenv",
    "pydantic",
    "pydantic-settings",
    "beautifulsoup4",
    "requests",
    "markdown",
    "fpdf",
    "anthropic",
    "google-generativeai",
    "tenacity",
    "rich",
    "pick",
    "PyYAML",
    "langcodes",
    "Jinja2",
]

[project.optional-dependencies]
validation = [
    "pytest",
    "pytest-cov", 
    "pytest-asyncio"
]
test = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio"
]
dev = [
    "black",
    "ruff",
    "mypy",
    "hatch"
]
all = [
    "pytest",
    "pytest-cov", 
    "pytest-asyncio",
    "black",
    "ruff",
    "mypy",
    "hatch"
]

[tool.hatch.build.targets.wheel]
packages = ["src/libriscribe"]

[project.scripts]
libriscribe = "libriscribe.main:app"

[tool.hatch.envs.default]
dependencies = ["pytest", "pytest-cov", "libriscribe[all]"]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests/}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src --cov=tests {args:.}"

[tool.hatch.envs.lint]
dependencies = ["black", "ruff", "mypy"]

[tool.hatch.envs.lint.scripts]
style = "black --check --diff {args:.}"
lint = "ruff check {args:.}"
typing = "mypy {args:.}"

[tool.hatch.env.default]
installer = "uv"
python = "3.12"

[tool.ruff]
# Exclude common folders from linting
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "venv_pdf_debug",
]
# Set the line length to match black's default
line-length = 120

[tool.ruff.lint]
# Enable more comprehensive linting rules
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "W",   # pycodestyle warnings
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
# Ignore specific rules that are too strict or conflict with our codebase
ignore = [
    "F401",  # unused imports
    "F541",  # f-string without placeholders
    "E501",  # line too long
    "B008",  # function call in default argument
    "B904",  # raise from err in except clauses
]
# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
known-first-party = ["src"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.format]
# Use double quotes for consistency
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false

[tool.mypy]
exclude = ["^venv/", "^build/", "^dist/"]
# Basic type checking configuration
no_implicit_optional = false
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Ignore errors in external modules
[[tool.mypy.overrides]]
module = "typer.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "openai.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "anthropic.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "google.generativeai.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "fpdf.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pick.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true
follow_imports = "skip"